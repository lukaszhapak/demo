spring:
  main:
    # Niestety Spring shell nie wystartuje bez tego
    allow-circular-references: true

logging.level.root: off

props.questions:
  - question: "Which of these is the HTTP response code when there is a redirection\
      \ of a request ?"
    correct:
      - "300"
    other:
      - "500"
      - "200"
      - "400"
    explanation: "Explanation: Http Response Status Codes for a request are 1x-informational,\
      \ 2x- Success, 3x-Redirectional, 4x-Client Side Error, 5x-Server Side Error.\n\
      Reference\n* https://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\
      \ \n* Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is being described below ? \nA bean instance in this scope\
      \ lives within the lifetime of a single HTTP Request."
    correct:
      - "request"
    other:
      - "session"
      - "global session"
      - "application"
    explanation: "Explanation: A Bean is created when there is a request and it is destroyed\
      \  after the request is completed.\nReference\n4.5.4. Request, session, and global\
      \ session scopes\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-scopes-other\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of the following is stereotype annotation? Select all that apply."
    correct:
      - "@Repository"
      - "@Component"
      - "@Service"
    other:
      - "@Configuration"
      - "@Bean"
    explanation: "Explanation: @Component, @Service, @Repository, @Controller are stereotype\
      \ annotations applied over a class for a specific use. These annotations are applied\
      \ in different layers of a spring application.\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html\n\
      * Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these embedded server is automatically available for use without\
      \ any manual configuration in Spring Boot?"
    correct:
      - "Tomcat"
    other:
      - "Undertow"
      - "Jetty"
      - "WebLogic"
    explanation: "Explanation: Tomcat Server is automatically available in Spring Boot\
      \ with the default port no 8080.\nReference\n* https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/howto-embedded-web-servers.html\n\
      * Spring Boot Reference Documentation 2.1.9 RELEASE"
  - question: "Which of these is advantage of Dependency Injection? Select all that\
      \ apply."
    correct:
      - "Reduces Biolerplate Code"
      - "Increases Cohesion"
      - "Increases Reusability"
    other:
      - "Increases Coupling"
    explanation: "Explanation: The main advantage of Dependency Injection is loose coupling,so\
      \ it reduces coupling.\nReference\n* https://en.wikipedia.org/wiki/Dependency_injection\n\
      * Wikipedia"
  - question: "Fill in the Blank.\n_______is an Interface which is responsible for Instantiating,\
      \ Configuring,\nAssembling and Managing the life-cycle of spring beans."
    correct:
      - "ApplicationContext"
    other:
      - "BeanContext"
      - "ApplicationBeanContext"
      - "ApplicationFactoryContext"
    explanation: "Explanation: ApplicationContext is an Interface with implementation\
      \ classes as ClasspathXmlApplicationContext, XmlApplicationContext, FileSystemApplicationContext\
      \ etc acts as a container in spring which is responsible for carrying out life\
      \ cycle of beans.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/context/ApplicationContext.html\n\
      * Spring-Framework Documentation 5.0.3 RELEASE"
  - question: "Fill in the Blanks.\nDependency Injection can be done using  _________\
      \ and ________\nways in a Spring based applications."
    correct:
      - "Setter-based dependency injection, Constructor-based dependency injection"
    other:
      - "Constructor-based dependency injection, Getter-based dependency injection"
      - "Getter-based dependency injection, Setter-based dependency injection"
      - "Factory-based dependency injection, Getter-based dependency injection"
    explanation: "Explanation: Dependency injection can be acheived using setter methods\
      \ which is setter-based dependency injection or with a constructor which is \n\
      constructor based dependency injection.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-collaborators\n\
      * Spring-Framework Documentation 5.0.3 RELEASE"
  - question: "Which of these is being described below ? \nEach time a bean is requested,\
      \ a new instance is created."
    correct:
      - "Prototype"
    other:
      - "Application"
      - "Session"
      - "Request"
    explanation: "Explanation: When the beans scope is prototype, beans are created\
      \ for every method call. This is called as lazy initialization.\nReference\n*\
      \ https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-scopes\n\
      * Spring-Framework Reference Documentation 5.0.3"
  - question: "Which of these is the correct abbreviation for AOP?"
    correct:
      - "Aspect Oriented Programming"
    other:
      - "Application Oriented Programming"
      - "None of the Above"
      - "Access  Oriented Programming"
    explanation: "Explanation: Aspect Oriented Programming is a paradigm that aim at\
      \ seperating a group of concerns in a software application.\nReference\n* https://en.wikipedia.org/wiki/Aspect-oriented_programming\n\
      * Wikipedia"
  - question: "Which of these spring module is used for seperation of cross-cutting\
      \ concerns from the code in a sofware application?"
    correct:
      - "AOP"
    other:
      - "ORM"
      - "Transaction Management"
      - "OXM"
    explanation: "Explanation: Aspect Oriented Programming(AOP) is a paradigm that aim\
      \ at seperating a group of cross cutting concerns in a software application.\n\
      Reference\n* https://en.wikipedia.org/wiki/Aspect-oriented_programming\n* Wikipedia"
  - question: "Which of these is  a cross cutting concern? Select all that apply."
    correct:
      - "Logging"
      - "Monitoring"
      - "Data Validation"
      - "Error Handling"
    other: [ ]
    explanation: "Explanation: Any functionality which is required in multiple areas\
      \ of application is called as a cross cutting concern. Logging, Error Handling,\
      \ Validation, and Monitoring are required in many areas of application.\nReference\n\
      * https://en.wikipedia.org/wiki/Cross-cutting_concern\n* Wikipedia"
  - question: "Fill in the blank.\n____________ is a point in the execution of a program\
      \ at which additional behaviour can be inserted using AOP."
    correct:
      - "Join Point"
    other:
      - "Advice"
      - "Point Cut"
      - "Weaving"
    explanation: "Explanation: Join Point is a single point in the program at which\
      \ at which additional behavior can be inserted, where as Point Cut is one or more\
      \ join points out of the set of all join points in an application.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#aop-introduction-defn\n\
      * Spring-Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the blank.\n__________ is an additional behavior, typically a\
      \ cross cutting concern, that is to be executed at certain places(at join Points)\
      \ in a program."
    correct:
      - "Advice"
    other:
      - "Aspect"
      - "None of the above."
      - "Weaving"
    explanation: "Explanation: Aspect is a cross cutting concern which is to be executed\
      \ at multiple areas(joinpoint) of an application.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#aop-introduction-defn\n\
      * Spring-Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the blank.\n___________ is a modularization of a concern that\
      \ cuts across multiple classes."
    correct:
      - "Aspect"
    other:
      - "Advice"
      - "None of the above"
      - "Weaving"
    explanation: "Explanation: Aspect is a cross cutting concern needed in many classes\
      \ of an application. For example, logging is an aspect which is a requirement\
      \ in many modules of an application.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#aop-introduction-defn\n\
      * Spring-Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the blank.\n_________ is linking aspects with other application\
      \ types or objects to create an advised object"
    correct:
      - "Weaving"
    other:
      - "Advice"
      - "Aspect"
      - "None of the above"
    explanation: "Explanation:\nReference\n*  https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#aop-introduction-defn\n\
      * Spring-Framework Reference Documentation 5.0.3 RELEASE"
  - question: "All Exception classes in Spring Framework are"
    correct:
      - "Unchecked Exceptions"
    other:
      - "None of these"
      - "Checked Exceptions"
      - "Some are Checked Exceptions and some are Unchecked Exceptions"
    explanation: "Explanation:\nSpring prefer Unchecked Exceptions as it gives developers\
      \ freedom of choice as to decide where to implement error handling and removes\
      \  coupling related to exceptions. It also removes cluttered code as there is\
      \ no requirement of try-catch blocks.\nReference\nMore on Exceptions\n*https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html\n\
      * Oracle Java Docs - Java 8"
  - question: "Fill in the blank.\n__________ is the root class of data access exceptions\
      \ hierarchy in Spring Framework"
    correct:
      - "DataAccessException"
    other:
      - "TransientDataAccessException"
      - "RecoverableDataAccessException"
      - "ScriptException"
    explanation: "Explanation: All the data access exceptions are child classes of DataAcessException\
      \ class.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/dao/DataAccessException.html\n\
      * Spring-Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of the these is true about JdbcTemplate class? Select all that\
      \ apply."
    correct:
      - "It reduces amount of biolerplate code necessary to perform JDBC operations."
      - "It handles exceptions ensuring that resources are properly closed or released."
      - "JdbcTemplate class simplifies the use of JDBC in Spring based applications."
      - "JdbcTemplate class provides convenient methods for performing CRUD operations."
    other: [ ]
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html\n\
      *  Spring Framework Reference Documentation 5.0.7\n"
  - question: "Which of these is true\
      \ regarding the code below.\n\n     <bean id=\"studentBean\" class=\"org.school.Student\"\
      >\n          <property name=\"name\" value=\"Mike\"/>\n          <property name=\"\
      rollno\" value=\"10\"/>\n     </bean>\n"
    correct:
      - "For properties, the values are set using setter methods."
      - "If the class have a property named 'rollno', and it is an 'int', it will be populated with the value 10."
      - "Bean is created for the class 'Student'."
    other:
      - "For properties, the values are initialized using a constructor."
    explanation: "Reference\n Dependencies and configuration\
      \ in detail\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-properties-detailed\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is the HTTP response code when there is a client side error?"
    correct:
      - "400"
    other:
      - "500"
      - "200"
      - "300"
    explanation: "Explanation: Http Response Status Codes for a request are 1x-informational,\
      \ 2x- Success, 3x-Redirectional, 4x-Client Side Error, 5x-Server Side Error.\n\
      Reference\n* https://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\
      \ \n* Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blank.\nA ___________ is an operation that consists of number\
      \ of tasks that take place as single unit- either all tasks are performed or no\
      \ tasks are performed."
    correct:
      - "Transaction"
    other:
      - "Logging"
      - "Data Validation"
      - "Authentication"
    explanation: "Explanation:\nReference\n* https://en.wikipedia.org/wiki/Transaction_processing#Atomicity\n\
      * Wikipedia"
  - question: "Which of these is described below?\nThe changes within a transaction\
      \ are either all applied or none applied."
    correct:
      - "Atomicity"
    other:
      - "Durability"
      - "Consistency"
      - "Isolation"
    explanation: "Explanation: Transaction follows ACID properties, where A stands for\
      \ Atomicity. According to it, transactions should be either in Success state or\
      \ Failure state.\nReference\n* https://en.wikipedia.org/wiki/Transaction_processing\n\
      * Wikipedia"
  - question: "Which of these is described below?\nThe actions taken as a group do not\
      \ violate any of the integrity constraints associated with the state."
    correct:
      - "Consistency"
    other:
      - "Durability"
      - "Atomicity"
      - "Isolation"
    explanation: "Explanation: Transaction follows ACID properties, where C stands for\
      \ Consistency. According to it, transactions should be consistent.\nThere should\
      \ be no loss of data after a transaction.\nReference\n* https://en.wikipedia.org/wiki/Transaction_processing\n\
      * Wikipedia"
  - question: "Which of these is described below?\nTransactions are independent to one\
      \ another."
    correct:
      - "Isolation"
    other:
      - "Durability"
      - "Consistency"
      - "Atomicity"
    explanation: "Explanation:\nThe effect of one transaction will not have any impact\
      \ on another transaction so they are independent to one another. They are totally\
      \ isolated from one another.\nReference\n* https://en.wikipedia.org/wiki/Transaction_processing\n\
      * Wikipedia"
  - question: "Which of these is described below?\nDuring any Transaction, if any problem\
      \ occurs and once the system is back the changes have to be preserved."
    correct:
      - "Durability"
    other:
      - "Consistency"
      - "Atomicity"
      - "Isolation"
    explanation: "Explanation:\nAs the changes have to be preserved, transactions are\
      \ durable in nature.\nReference\n* https://en.wikipedia.org/wiki/Transaction_processing\n\
      * Wikipedia"
  - question: "Which of these is used to implement Declarative Transaction Management\
      \ in Spring Applications?"
    correct:
      - "Spring AOP"
    other:
      - "Spring Security"
      - "Spring ORM"
      - "Spring JDBC"
    explanation: "Explanation: Transactions is a cross cutting concern which is implemented\
      \ using AOP. \nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/data-access.html#tx-decl-explained\n\
      * Spring- Framework Reference Documentation 5.0.3"
  - question: "Which of these is the correct naming convention for custom find methods\
      \ in Spring Data Repository Interface?"
    correct:
      - "find(First[count]) By[Property Expression] [comparison operator] [ordering\
        \ operator]"
    other:
      - "find(First[count]) By[Property Expression] [ordering operator] [comparison\
        \ operator]"
      - "find(First[count])  [ordering operator] [comparison operator] By[Property\
        \ Expression]"
      - "None of the above."
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-data/jpa/docs/2.1.1.RELEASE/reference/html/#repositories.query-methods.details\n\
      * Spring Data JPA - Reference Documentation 2.1.1 RELEASE"
  - question: "Which of these annotation is used for specifying a query to be used with\
      \ a Spring Data JPA Repository method?"
    correct:
      - "@Query"
    other:
      - "@SqlQuery"
      - "@JpaQuery"
      - "@DataQuery"
    explanation: "Explanation: \nExample\npublic interface PersonRepository extends\
      \ JpaRepository<Person, Long>\n{\n  @Query(\"select p from Person p where p.emailAddress\
      \ = ?l\")\n   Person findByEmailAddress(String emailAddress);\n}\nReference\n\
      * Spring Data JPA Reference: Using @Query\nhttps://docs.spring.io/spring-data/jpa/docs/2.1.1.RELEASE/reference/html/#jpa.query-methods.at-query\n\
      * Spring Data JPA API:@Query\nhttps://docs.spring.io/spring-data/jpa/docs/2.1.1.RELEASE/api/org/springframework/data/jpa/repository/Query.html\
      \ \n* Spring Data JPA - Reference Documentation 2.1.1 RELEASE"
  - question: "Which of these is comparison operator which can be used in custom finder\
      \ method declaration in Spring Data JPA Repository Interface?\nSelect all that\
      \ apply."
    correct:
      - "Like"
      - "GreaterThan"
      - "Between"
      - "LessThan"
    other: [ ]
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-data/jpa/docs/2.1.1.RELEASE/reference/html/#jpa.query-methods.at-query\n\
      * Spring Data JPA Reference Documentation - 2.1.1 RELEASE"
  - question: "Which of these is ordering operator which can be used in custom finder\
      \ method declaration in Spring Data JPA Repository Interface?\nSelect all that\
      \ apply."
    correct:
      - "Asc"
    other:
      - "Ascending"
      - "Descending"
      - "Desc"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-data/jpa/docs/2.1.1.RELEASE/reference/html/#jpa.query-methods.at-query\n\
      * Spring Data JPA Reference Documentation - 2.1.1 RELEASE"
  - question: "Which of these is a front controller in MVC  based applications?"
    correct:
      - "DispatcherServlet"
    other:
      - "ControllerServlet"
      - "FrontControllerServlet"
      - "FrontDispatcherServlet"
    explanation: "Explanation:\nAll the requests are intercepted by DispatcherServlet\
      \ in MVC based applications.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/web.html#mvc-servlet\n\
      * Spring Framework Documentation 5.0.7 RELEASE"
  - question: "Which of these URL should be used to access the following Controller\
      \ class? Assume the port no to be 8080.\n\n@RequestMapping(\"/greeting\")\npublic\
      \ String sayHello (@RequestParam String name, @RequestParam int id)\n{\n   return\
      \ \"Hello\";\n}"
    correct:
      - "http://localhost:8080/greeting?name=John&id=4324"
    other:
      - "http://localhost:8080/greeting&name=John?id=4324"
      - "http://localhost:8080/greeting/name=John/id=4324"
      - "http://localhost:8080/greeting?name=John?id=4324"
    explanation: "Explanation: \nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these annotation is used to get Query String Parameters of request\
      \ URLs to handler method arguments?"
    correct:
      - "@RequestParam"
    other:
      - "@ResponseParam"
      - "@SessionParam"
      - "@PathVariable"
    explanation: "Explanation: When an annotation @RequestParam is used before a variable\
      \ of a controller method argument , the value of query parameter which is part\
      \ of URL gets copied into the same variable of the controller method.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these annotation is used to map a part of request URL to handler\
      \ method arguments?"
    correct:
      - "@PathVariable"
    other:
      - "@RequestParam"
      - "@RequestVariable"
      - "None of the above."
    explanation: "Explanation: @PathVariable annotation is used to copy part of URL\
      \ into local variables of controller methods.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these is true about MVC? Select all that apply."
    correct:
      - "It is a software design pattern."
      - "It gives standard template for designing web applications."
      - "It provides loose coupling among model, view and controllers."
    other:
      - "It is a framework for developing web applications."
    explanation: "Explanation: MVC is a design pattern which provides set of guidelines\
      \ for developing web applications.\nReference\n* https://en.wikipedia.org/wiki/Model-view-controller\n\
      * Wikipedia"
  - question: "Which of these is a callback interface for a JdbcTemplate class?"
    correct:
      - "ResultSetExtractor"
    other:
      - "StatementExtractor"
      - "PreparedStatementExtractor"
      - "All of them"
    explanation: "Explanation: ResultSetExtractor is used to get all the rows in database\
      \ table.\nReference\n* https://docs.spring.io/spring-framework/docs/1.2.x/api/org/springframework/jdbc/core/package-summary.html\n\
      * Spring Framework Reference Documentation 1.2"
  - question: "Which design pattern does the JdbcTemplate class implement?"
    correct:
      - "Template Design Pattern"
    other:
      - "Decorator Design Pattern"
      - "Factory Design Pattern"
      - "Adapter Design Pattern"
    explanation: "Explanation: The name  JdbcTemplate derives from the design pattern\
      \ Template Design Pattern.\nReference\n*  More about JdbcTemplate class\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html"
  - question: "In Spring MVC, which of these can be the return type of a method annotated\
      \ with @RequestMapping?"
    correct:
      - "String"
    other:
      - "float"
      - "int"
      - "double"
    explanation: "Explanation: \nReference\nURI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring MVC, which of these annotations can be applied to the arguments\
      \ of controller methods? Select all that apply."
    correct:
      - "@RequestParam"
      - "@RequestBody"
      - "@PathVariable"
    other:
      - "@RequestMapping"
    explanation: "Explanation:\nReference\nURI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the Blanks.\nIn Spring Security ___________ comes after _______________?"
    correct:
      - "Authorization, Authentication"
    other:
      - "Principal, Authorization"
      - "Authentication , Authorization"
      - "Principal, Authentication"
    explanation: "Explanation:\nAuthentication is process of validating the user who\
      \ he claims to be. Once the person is authenticated, he is allowed to perform\
      \ certain actions based on his role, which is authorization.\nReference\nMore\
      \ on Authentication in Spring\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#tech-intro-authentication\n\
      More on Authentication\n* https://en.wikipedia.org/wiki/Authentication\nMore on\
      \ Authorization\n* https://en.wikipedia.org/wiki/Authorization"
  - question: "Which of these is true about REST? Select all that apply."
    correct:
      - "REST is Reliable."
      - "REST is Scalable."
      - "REST is Interoperable."
      - "REST is Secure."
    other: [ ]
    explanation: "Explanation:\nReference\n* https://en.wikipedia.org/wiki/Representational_state_transfer\n\
      * Wikipedia"
  - question: "What Spring Boot Starter would you use for a Spring REST application?"
    correct:
      - "spring-boot-starter-web"
    other:
      - "spring-boot-starter-rest"
      - "spring-boot-starter-rest-mvc"
      - "spring-boot-starter-web-mvc"
    explanation: "Explanation: The Spring Boot Web Starter Maven pom.xml file contains\
      \ the following in the description:\n\"Starter for the building web, including\
      \ RESTful, applications using Spring MVC.\"\nReferences\n* https://spring.io/guides/gs/rest-service/\n\
      * Spring Rest Documentation"
  - question: "Which jar is needed in classpath for using @RestController, @ResponseBody,\
      \ @RequestBody in Spring applications?"
    correct:
      - "spring-web"
    other:
      - "spring-core"
      - "spring-mvc"
      - "spring-web-mvc"
    explanation: "Explanation: @RestController, @RequestBody, @ResponseBody are present\
      \ in the spring-web module that has the Maven group id org.springframework and\
      \ artifact id spring-web.\nReference\n* https://github.com/spring-projects/spring-framework/tree/master/spring-web/src/main/java/org/springframework/web/bind/annotation\n\
      * GITHUB"
  - question: "Which of these is the HTTP response code when there is server side error\
      \ ?"
    correct:
      - "500"
    other:
      - "200"
      - "300"
      - "400"
    explanation: "Explanation: Http Response Status Codes for a request are 1x-informational,\
      \ 2x- Success, 3x-Redirectional, 4x-Client Side Error, 5x-Server Side Error.\n\
      Reference\n* https://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\
      \ \n* Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is the HTTP response code when there is a successful request\
      \ ?"
    correct:
      - "200"
    other:
      - "500"
      - "300"
      - "400"
    explanation: "Explanation: Http Response Status Codes for a request are 1x-informational,\
      \ 2x- Success, 3x-Redirectional, 4x-Client Side Error, 5x-Server Side Error.\n\
      Reference\n* https://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\
      \ \n* Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which ones are true about Spring Framework's Test module?  Select all\
      \ that apply."
    correct:
      - "It supports EasyMock Framework"
      - "JUnit is supported."
      - "It supports Mockito Framework"
    other:
      - "TestNG is not supported."
    explanation: "Explanation:\nSpring has mock support under the package org.springframework.mock.\
      \  Examples are:\n     org.springframework.mock.env for Environment and PropertySource\
      \ abstractions\n     org.springframework.mock.jndi for JNDI\n     org.springframework.mock.web\
      \ for Servlet\n     org.springframework.mock.web.portlet for portlets\n     etc.\n\
      Reference\n2.2.5. Test\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/overview.html#overview-testing\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is described below? \nIt is used to test smallest unit\
      \ of functionality like a method in a class, a class or an entire module."
    correct:
      - "Unit Testing"
    other:
      - "Integration Testing"
      - "Performance Testing"
      - "Beta Testing"
    explanation: "Explanation: Unit Testing is the foremost testing done in software\
      \ development life cycle. All individual units of an application are tested to\
      \ make sure that they are working good.\nReference\n* https://en.wikipedia.org/wiki/Unit_testing\n\
      * Wikipedia"
  - question: "Which of these is described below? \nIt is testing of several modules\
      \ of software when they are combined\ntogether and tested as whole."
    correct:
      - "Integration Testing"
    other:
      - "Unit Testing"
      - "Performance Testing"
      - "Beta Testing"
    explanation: "Explanation: Once the Unit Testing is done, Integration Testing takes\
      \ place to make sure that the application is working as excepted when all the\
      \ modules are integrated together.\nReference\n*https://en.wikipedia.org/wiki/Integration_testing\n\
      * Wikipedia"
  - question: "Which of these annotation is used to annotate test classes and determines\
      \ how the spring application context that will be available to all tests in the\
      \ class is to be loaded and configured?"
    correct:
      - "@ContextConfiguration"
    other:
      - "@Configuration"
      - "@TestConfiguration"
      - "None of the above."
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/test/context/ContextConfiguration.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In which of these Testing Spring Framework is not used?"
    correct:
      - "Unit Testing"
    other:
      - "Integration Testing"
      - "Performance Testing"
      - "Manual Testing"
    explanation: "Explanation:\nA unit is tested in isolation outside of the environment\
      \ for which it is intended. This means, among other things, that the Spring Framework\
      \ is not used to perform dependency injection in unit tests. Instead any dependecies\
      \ are commonly replaced by mocks or stubs, which are created programmatically\
      \ in the test- class, and set on the instance-under-test using setter methods.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/testing.html#unit-testing\n\
      *  Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the blanks.\n __________ are dependency descriptors for different\
      \ technologies that can be used in Spring Boot application."
    correct:
      - "Spring Boot Starters"
    other:
      - "Spring Boot Devtools"
      - "Spring Boot Actuator"
      - "None of the above"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#using-boot-starter\n\
      * Spring Boot Reference Documentation 2.0.6 RELEASE"
  - question: "Which of these Spring Project is reffered as \"opinionated\"?"
    correct:
      - "Spring Boot"
    other:
      - "Spring Security"
      - "Spring Rest"
      - "Spring Web"
    explanation: "Explanation: Spring Boot is opinionated which means it has set of\
      \ industry standard guidelines for developing applications, at the same time it\
      \ gives freedom for the developer to express their opinions for developing applications\
      \ as per their requirement.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#getting-started-introducing-spring-boot\n\
      * Spring Boot Reference Documentation 2.0.6 RELEASE"
  - question: "Which of these is true about Spring Boot?"
    correct:
      - "It produces an executable Jar which can be run using command like interface."
      - "It provides set of managed depedencies and plugins like maven or gradle."
      - "It reduces boiler plate code for developing applications."
      - "It allows easy customizations for the developer."
    other: [ ]
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#getting-started-introducing-spring-boot\n\
      * Spring Boot Reference Documentation 2.0.6 RELEASE"
  - question: "Which of these is not supported as an embedded container in Spring Boot?\
      \  Select all that apply."
    correct:
      - "Glassfish"
      - "WebLogic"
    other:
      - "Undertow"
      - "Jetty"
    explanation: "Explanation:  Tomcat, Jetty , Undertow are the default embedded servers\
      \ in Spring Boot.\nReference\n*  https://docs.spring.io/spring-boot/docs/2.1.9.RELEASE/reference/html/howto-embedded-web-servers.html\n\
      * Spring Boot Reference Documentation 2.1.9 RELEASE"
  - question: "For setting the properties of an application, Spring Boot has provided\
      \ a default file with the name _____________."
    correct:
      - "application.properties"
    other:
      - "app.properties"
      - "setting.properties"
      - "appsetting.properties"
    explanation: "Explanation: We can set the properties like server port, logging level,\
      \ application name etc using application.properties file.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#getting-started-introducing-spring-boot\n\
      * Spring Boot Reference Documentation 2.0.6 RELEASE"
  - question: "By default which logging level related information is shown as output\
      \ in \nSpring Boot applications? Select all that apply."
    correct:
      - "INFO"
      - "ERROR"
      - "WARN"
    other:
      - "DEBUG"
    explanation: "Explanation:\nReference\n*https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-custom-log-levels\n\
      * Spring Boot Documentation 2.0.6 RELEASE"
  - question: "Which of these sets the root logger level to WARN in Spring Boot application?"
    correct:
      - "logging.level.root= WARN"
    other:
      - "logging.level.base= WARN"
      - "logging.level.configure=WARN"
      - "logging.level.property=WARN"
    explanation: "Explanation:\nReference\n*https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-custom-log-levels\n\
      * Spring Boot Documentation 2.0.6 RELEASE"
  - question: "On which of these database system isolation levels can phantom reads\
      \ occur?  Select all that apply."
    correct:
      - "Read committed"
      - "Repeatable reads"
      - "Read uncommitted"
    other:
      - "Serializable"
    explanation: "Explanation:\nReference\n  * https://en.wikipedia.org/wiki/Isolation_(database_systems)\n\
      \  *  Wikipedia"
  - question: "Which of these logging frameworks are supported by Spring Boot? Select\
      \ all that apply."
    correct:
      - "LogBack"
      - "Log4j2"
    other:
      - "TinyLog"
      - "Slf4j2"
    explanation: "Explanation: Spring Boot uses LogBack by default. It supports Log4J2\
      \ and LogBack.\nReference\n* Logging Frameworks in Java\nhttps://en.wikipedia.org/wiki/Java_logging_framework"
  - question: "In Spring Boot, server port number can be changed by configuring in ____________file"
    correct:
      - "application.properties"
    other:
      - "By using an annotation @ServerPort in Main Class."
      - "By creating a file named server.port in classpath."
      - "pom.xml"
    explanation: "Explanation:\nThe port number for application is configured in application.properties\
      \ file as server.port = 8083 ,where port no can be anything which is a choice\
      \ of the developer.\nReference\n* https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/\n\
      * Spring Boot Reference Documentation 2.3.1 RELEASE"
  - question: "Which of these annotation enables Spring Boot auto-configuration?"
    correct:
      - "@EnableAutoConfiguration"
    other:
      - "@Configuration"
      - "@EnableConfiguration"
      - "@AutoConfiguration"
    explanation: "Explanation: The @EnableAutoConfiguration annotation enables Spring\
      \ Boot auto-configuration. It attempts to create and configure beans based on\
      \ the dependencies available on the class-path to allow developers to quickly\
      \ get started with different technologies thereby reducing configuration and boilerplate\
      \ code.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#getting-started-first-application-auto-configuration\n\
      * Spring Boot Reference Documentation 2.0.6 RELEASE"
  - question: "Which of these file types will have the content format as given below?\n\
      \nuser:\n     details:\n          username: John\n           passsword: music123\n\
      city: NewYork"
    correct:
      - "YML file"
    other:
      - "XML file"
      - "Properties file"
      - "Java Based Configuration file"
    explanation: "Explanation: YAML stands for Ain't Markup Language. YAML files are\
      \ used to set properties in Spring Boot application.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-external-config-application-property-files\n\
      * https://yaml.org/\n* Spring Boot Reference Documentation 2.0.6  RELEASE\n* YAML\
      \ Official Website"
  - question: "Which of these annotation is used to inject property values into spring\
      \ beans and configuration classes?"
    correct:
      - "@Value"
    other:
      - "@Import"
      - "@PropertyResource"
      - "@Primary"
    explanation: "Explanation: @Value can be placed over property variable or its setter\
      \ method. The value is injected into that variable based on properties file.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Value.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "What properties do u have to define in order to configure external MySQL?\
      \ Select all that apply."
    correct:
      - "database password"
      - "driver class name"
      - "database URL"
      - "database username"
    other: [ ]
    explanation: "Explanation: For Connecting to an external database in Spring Boot,\
      \ database url, database username, database password and driver class name have\
      \ to be defined in application.properties file.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-connect-to-production-database\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Fill in the blank.\nA ____________ is a self-contained JAR file which\
      \ contains all dependencies needed for the application to be run."
    correct:
      - "fat JAR"
    other:
      - "application JAR"
      - "self JAR"
      - "dependency JAR"
    explanation: "Explanation:  A fat jar contains all the required dependencies, including\
      \ a server. It can be run alone for execution of an application.\nReference\n\
      * https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#getting-started-first-application-executable-jar\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these is true about the annotation @SpringBootApplication?"
    correct:
      - "@SpringBootApplication = @Configuration +  @ComponentScan + @ EnableAutoConfiguration"
    other:
      - "@SpringBootApplication = @Configuration +  @Component + @Bean"
      - "@SpringBootApplication = @Configuration +  @Component + @ EnableAutoConfiguration"
      - "@SpringBootApplication = @Configuration +  @Bean + @ EnableAutoConfiguration"
    explanation: "Explanation: @SpringBootApplication is an annotation mainly used on\
      \ main class of Spring Boot application. It enables three annotations namely @Configuration,\
      \ @ComponentScan, @EnableAutoConfiguration.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/api/org/springframework/boot/autoconfigure/SpringBootApplication.html\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these file is used to locate candidates for autoconfiguration\
      \ in a \nSpring Boot application?"
    correct:
      - "spring.factories"
    other:
      - "POM.xml"
      - "application.properties"
      - "A class annotated with @EnableAutoConfiguration"
    explanation: "Explanation: The classes which are related to any dependencies available\
      \ on classpath and which have their entry in spring.factories file are auto-configured\
      \ at the application startup.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-understanding-auto-configured-beans\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these is true about spring.factories file? Select all that apply."
    correct:
      - "Locate autoconfiguration candidates in, for instance, your own starter\
        \ module."
      - "Customize the environment or application context prior to the Spring Boot\
        \ application has started up."
      - "Register a filter to limit the auto-configuration classes considered."
      - "Register application event listeners regardless of how the Spring Boot\
        \ application is created."
    other: [ ]
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-application-events-and-listeners\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these property is set in application.properties for customizing\
      \ Spring Boot auto-configuration?"
    correct:
      - "spring.main.allow-bean-definition-overriding=true"
    other:
      - "spring.main.bean-definition-overriding=true"
      - "spring.allow-bean-definition-overriding=true"
      - "spring.main.allow-bean-overriding=true"
    explanation: "Explanation:  In order to be able to override bean definitions using\
      \ beans with the same name as the original bean, spring.main.allow-bean-definition-overriding\
      \ property needs to be set true in the application.properties file.\nReference\n\
      * https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#using-boot-auto-configuration\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these feature is provided by Spring Boot Actuator? Select all\
      \ that apply."
    correct:
      - "Application Metrics"
      - "Application health monitoring"
      - "Management"
      - "Auditing"
    other: [ ]
    explanation: "Explanation: Spring Boot provides convenient way to monitor health\
      \ of the application, metrics, etc by providing endpoints. All these features\
      \ of Spring Boot Actuator can be accessed by using their respective endpoints.\n\
      Reference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-endpoints\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these is used to monitor health of a Spring Boot application?"
    correct:
      - "Spring Boot Actuator"
    other:
      - "Spring Boot Devtools"
      - "Spring Boot Starter"
      - "Spring Boot Initializer"
    explanation: "Explanation: Spring Boot provides convenient way to monitor health\
      \ of the application, metrics, etc by providing endpoints. All these features\
      \ of Spring Boot Actuator can be accessed by using their respective endpoints.\n\
      Reference:\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "What are the two protocols you can use to access the actuator endpoints?\
      \ Select all that apply."
    correct:
      - "JMX"
      - "HTTP"
    other:
      - "HTTPS"
      - "FTP"
    explanation: "Explanation: Spring Boot Actuator endpoints can be accessed over HTTP\
      \ and JMX, provided that an endpoint is enabled.\nReference:\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-monitoring\n\
      * https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-jmx\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Fill in the Blank.\n__________  is measurement of different aspects of\
      \ the application for determining the performance of the application at different\
      \ points in time under different conditions."
    correct:
      - "Metrics"
    other:
      - "Monitoring"
      - "Management"
      - "Auditing"
    explanation: "Explanation: Metrics is used to measure different aspects of an application\
      \ like Response time of Http Requests, No of active connections in a database\
      \ connection pool, memory usage, garbage collection statistics etc.\nReference\n\
      * https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which are the two endpoints provided by default by Spring Boot Actuator?"
    correct:
      - "health and info"
    other:
      - "env and health"
      - "metrics and mappings"
      - "beans and info"
    explanation: "Explanation: Health and info are the only two endpoints exposed by\
      \ default. These endpoints can be accessed using the urls http:localhost:8080/actuator/health\
      \ and http:localhost:8080/actuator/info\nReference:\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these url is used to access the available actuator endpoints\
      \ in a Spring Boot application? Assume port no is 8080."
    correct:
      - "http://localhost:8080/actuator"
    other:
      - "http://localhost:8080/endpoint/actuator"
      - "http://localhost:8080/bootactuator"
      - "http://localhost:8080/boot/actuator"
    explanation: "Explanation: By sending a GET request using the URL http://localhost:8080/actuator,\
      \ one can list out the available actuator endpoints.\nReference\n * https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-endpoints\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these two properties are to be set in application.properties\
      \ so that all the available actuator endpoints are enabled? Select all that apply."
    correct:
      - "management.endpoints.enabled-by-default=true"
      - "management.endpoints.web.expose.include=*"
    other:
      - "management.endpoints.web.include=*"
      - "management.endpoints.enable=true"
    explanation: "Explanation: When these two properties are set in application properties,\
      \ \nall the available endpoints are enabled and they can be accessed by sending\
      \ a GET request to the endpoint URL.\nReference:\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-endpoints\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these is true regarding leveraging third party monitoring system?"
    correct:
      - "It helps in alerting for anamolous behaviour of an application."
      - "It helps in monitoring the stats of an application."
      - "It allows visualization of monitoring data of an application."
      - "It helps in gathering information from multiple applications in a single\
        \ place."
    other: [ ]
    explanation: "Explanation: In Spring Boot, Monitoring of an application can be done\
      \ using Actuator. It provides Http Endpoints for accessing the monitoring mechanism\
      \ of an application.\nReference: More on Spring Boot\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#production-ready-endpoints\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these are the Health Indicator statuses that are provided in\
      \ Spring Boot Actuator? Select all that apply."
    correct:
      - "OUT_OF_SERVICE"
      - "UP"
      - "DOWN"
    other:
      - "KNOWN"
    explanation: "Explanation: There are four predefined health indicator statuses in\
      \ Spring Boot Actuator namely, Status.DOWN, Status.OUT_OF_SERVICE, Status.UNKNOWN,\
      \ Status.UP.\nReference:\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/api/org/springframework/boot/actuate/health/Status.html\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these annotation is used to annotate test-classes that contain\
      \ tests of only JPA components?"
    correct:
      - "@DataJpaTest"
    other:
      - "@JpaDataTest"
      - "@JpaTest"
      - "@DataTest"
    explanation: "Explanation: @DataJpaTest autoconfigures caching, JPA repositories\
      \ and JPA base configuration for using Hibernate.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/api/org/springframework/boot/test/autoconfigure/orm/jpa/DataJpaTest.html\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these annotation is used in tests which aim to test only Spring\
      \ MVC components?"
    correct:
      - "@WebMvcTest"
    other:
      - "@TestWebMvc"
      - "@MvcTest"
      - "@WebTest"
    explanation: "Explanation: @WebMvcTest annotation is used in test classes which\
      \ intend to test only MVC web components. It auto-configures Caching, Http message\
      \ converters, Gson, Spring Security etc.\nReference\n* https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/api/org/springframework/boot/test/autoconfigure/web/servlet/WebMvcTest.html\n\
      * Spring Boot Reference Documentation 2.0.6  RELEASE"
  - question: "Which of these help in implementing Spring Security in a Spring application?"
    correct:
      - "Both are correct"
    other:
      - "Spring AOP proxies"
      - "Spring Security's Web Infrastructure using Filters"
    explanation: "Explanation: Spring Security can be implemented in an application\
      \ by using AOP proxies and by using filters of web infrastructure. In first way,by\
      \ using Spring AOP proxy that inherits from the AbstractSecurityInterceptor class.\
      \ In second way, filter like DelegatingFilterProxy is used for implementation\
      \ of security in applications.\nReference\n* https://docs.spring.io/spring-security/site/docs/current/reference/html5/\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Which of these is true about Spring Security?"
    correct:
      - "All of the above."
    other:
      - "It is used for securing Spring Web applications."
      - "It is a cross cutting concern."
      - "It provides support for both Authentication and Authorization."
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-security/site/docs/current/reference/html5/\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Fill in the Blank.\nIn Spring Security, _______________ holds the information\
      \ of an authority granted to an authenticated principal?"
    correct:
      - "GrantedAuthority"
    other:
      - "AuthorityGranted"
      - "AuthorityPrincipal"
      - "PrincipalAuthority"
    explanation: "Explanation: GrantedAuthority Object contains the information related\
      \ to authority or roles assigned to the authenticated user(principal).\nReference\n\
      * https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#core-components\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Fill in the Blank.\nIn Spring Security, for a given username ______________\
      \ retrieves the information from a database for performing authentication."
    correct:
      - "UserDetailsService"
    other:
      - "UserDetails"
      - "GrantedAuthority"
      - "Authentication"
    explanation: "Explanation: In Spring Security, UserDetailsService retrieves the\
      \ information from a database into UserDetails object. Based on the implementation\
      \ used, the the information may be stored in a database, in memory or elesewhere\
      \ if the custom implementation is used.\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#core-components\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Fill in the Blank.\nIn Spring Security, __________ holds the information\
      \ of user like username and password."
    correct:
      - "UserService"
    other:
      - "UserServiceDetails"
      - "UserDetailsService"
    explanation: "Explanation: UserDetails object holds the information of user like\
      \ username, password, authorities. This information is used to create an Authentication\
      \ Object\nafter successful authentication.\nReference:\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#core-components\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Fill in the Blank.\nIn Spring Security, ___________ object represents\
      \ the token for authentication request after the request has been granted."
    correct:
      - "Authentication"
    other:
      - "UserDetails"
      - "GrantedAuthority"
      - "UserDetailsService"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#core-components\n\
      * Spring Security Reference Documentation 5.3"
  - question: "Fill in the Blank.\nIn Spring Security, ___________ is a filter which\
      \ implements javax.servlet.filter interface and which intercepts all the requests\
      \ sent to an application."
    correct:
      - "DelegatingFilterProxy"
    other:
      - "FilterChainProxy"
      - "DelegatingProxy"
    explanation: "Explanation: All the requests are handled by DelegatingFilterProxy\
      \ and it sends the request to FilterChainProxy for handling further Authentication\
      \ flow.\nReference:\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/web/filter/DelegatingFilterProxy.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\nIn Spring Security, ________________ associates a\
      \ request URL pattern with a list of filters."
    correct:
      - "SecurityFilterChain"
    other:
      - "FilterChain"
      - "FilterSecurityChain"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#security-filter-chain\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of the these web component is used for implementation of Security\
      \ in Spring applications?"
    correct:
      - "Servlet Filters"
    other:
      - "Servlet Wrappers"
      - "Servlet Listeners"
    explanation: "Explanation: Filters are executed just before the servlets are executed.\
      \ So any security mechanism like authentication are implemented using filters,\
      \ so that a valid \nuser is accessing the secured resource.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/web/filter/DelegatingFilterProxy.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Spring Security, which of these annotation is used to enable method\
      \ level security?"
    correct:
      - "@EnableGlobalMethodSecurity"
    other:
      - "@EnableMethodSecurity"
      - "@EnableGlobalSecurity"
    explanation: "Explanation: @EnableGlobalMethodSecurity annoation is used to add\
      \ additional layer of security for web applications but can also be the only of\
      \ security in applications which do not expose a web interface.\nReference\n*\
      \ https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/api/org/springframework/security/config/annotation/method/configuration/EnableGlobalMethodSecurity.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Spring Security, In which of these layers @EnableGlobalMethodSecurity\
      \ is used?"
    correct:
      - "Service layer"
    other:
      - "Controller layer"
      - "DAO layer"
    explanation: "Explanation: @EnableGlobalMethodSecurity annotation is used for services\
      \ in the service layer of an application.\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/api/org/springframework/security/config/annotation/method/configuration/EnableGlobalMethodSecurity.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\nIn Spring Security, __________ annotation allows\
      \ for specifying access constraints to a method using Spring Expresion language(spEL)."
    correct:
      - "@PreAuthorize"
    other:
      - "@PostAuthorize"
      - "@Authorize"
    explanation: "Explanation: When @PreAuthorize annotation is used, constraints are\
      \ evaluated prior to the method being executed. If the constraints are not fullfilled,\
      \ method is not executed as a security failure.\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#method-security-expressions\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Spring Security, on which annotations usage of Spring Expression Language\
      \ (spEL) is not supported? Select all that apply."
    correct:
      - "@RolesAllowed"
      - "@Secured"
    other:
      - "@PreAuthorize"
      - "@PreFilter"
    explanation: "Explanation: @PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter\
      \ annotations support Spring Expression Language(spEL).\nReference\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#method-security-expressions\n\
      * Spring Security Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\nIn Spring Security, Method-level security is accomplished\
      \ using Spring ____________ proxies."
    correct:
      - "AOP"
    other:
      - "Transactions"
      - "ORM"
      - "OXM"
    explanation: "Explanation: Security is a cross cutting concern. Spring AOP provides\
      \ Convenient way to seperate Cross cutting concerns from business logic.\nReference:\n\
      * https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#method-security-expressions\n\
      * Spring Security Reference Documentation 5.0.7 RELEASE"
  - question: "In Spring Security, @Secured annotation is a legacy Annotation from Spring\
      \ 2.x Version. In place of @Secured,\nwhich of these annotation can be used?"
    correct:
      - "@PreAuthorize"
    other:
      - "@PostFilter"
      - "@RolesAllowed"
      - "@PreFilter"
    explanation: "Explanation: @Secured Annotation is an annotation which is used to\
      \ configure method level security. It doesnot support Spring Expression Language.\
      \ It is highly recommended to use @PreAuthorize in new applications as this annotation\
      \ which is from Spring 2 Version.\nReference:\n* https://docs.spring.io/spring-security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#method-security-expressions\n\
      * Spring Security Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\nTransactions which take place within single resource\
      \ like within same database are called ___________________."
    correct:
      - "Local Transactions"
    other:
      - "Internal Transactions"
      - "Confined Transactions"
    explanation: "Explanation: Local transactions are resource-specific, such as a transaction\
      \ associated with a JDBC connection. Local transactions may be easier to use,\
      \ but have significant disadvantages: they cannot work across multiple transactional\
      \ resources.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#transaction-motivation\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\nTransactions which take place across multiple resources\
      \ like multiple databases are called ___________________."
    correct:
      - "Global Transactions"
    other:
      - "General Transactions"
      - "Universal Transactions"
    explanation: "Explanation: Global transactions enable you to work with multiple\
      \ transactional resources, typically relational databases and message queues.\
      \ For an Example, sending money from one bank to an another bank is a Global Transaction.\
      \ Two banks work with two different resources like databases and the transaction\
      \ takes place between them. Such a transaction is called as a Global Transaction.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#transaction-motivation\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these correctly describes Transaction Management?"
    correct:
      - "It follows ACID properties."
      - "It is implemented using Spring AOP."
    other:
      - "It is not a cross cutting concern."
    explanation: "Explanation: Transaction Management is a cross cutting concern. It\
      \ is applied across multiple areas of an application and is implemented using\
      \ Spring AOP. It follows Atomicity, Consistency, Isolation and Durability.\nReference\n\
      * https://en.wikipedia.org/wiki/Transaction_processing\n* Wikipedia"
  - question: "In Spring Transaction Management which of these Annotation is used to\
      \ specifiying Transaction attributes like isolation, propagation, rollbackFor\
      \ etc?"
    correct:
      - "@Transactional"
    other:
      - "@EnableTransaction"
      - "@Transaction"
    explanation: "Explanation: Transaction attributes like isolation, propagation, timeout,\
      \ rollbackFor,\nreadOnly, transactionManager can be specified using @Transactional\
      \ annoation which can be applied over methods or class level.\nReference:\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/transaction/annotation/Transactional.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Transaction Management, which of these has the highest level of isolation?"
    correct:
      - "Serializable"
    other:
      - "Read committed"
      - "Repeatable reads"
      - "Read uncommitted"
    explanation: "Explanation:\nReference\n* https://en.wikipedia.org/wiki/Isolation_(database_systems)\n\
      * Wikipedia"
  - question: "In Transaction Management, which of these has the least level of isolation?"
    correct:
      - "Read uncommitted"
    other:
      - "Read committed"
      - "Serializable"
      - "Repeatable reads"
    explanation: "Explanation:\nReference\n* https://en.wikipedia.org/wiki/Isolation_(database_systems)\n\
      * Wikipedia"
  - question: "Which of these are isolation levels in a database system? Select all\
      \ that apply."
    correct:
      - "Read committed"
      - "Serializable"
      - "Repeatable reads"
      - "Read uncommitted"
    other: [ ]
    explanation: "Explanation: There are four isolation levels namely Serializable,\
      \ Repeatable reads, Read committed and Read uncommitted. Serializable has the\
      \ highest level of isolation where as Read uncommitted has the least level of\
      \ isolation.\nReference\n* https://en.wikipedia.org/wiki/Isolation_(database_systems)\n\
      * Wikipedia"
  - question: "Transaction _________ in database systems determine how the changes within\
      \ a transaction are visible to other users and systems accessing the database\
      \ prior to the transaction being committed."
    correct:
      - "Isolation"
    other:
      - "Durability"
      - "Consistency"
      - "Atomicity"
    explanation: "Explanation: Transaction isolation determines how the changes within\
      \ a transaction are visible to the users who acccess it prior to transaction being\
      \ committed. There are four transaction isolation levels namely Serializaible,\
      \ Repeatable reads, Read committed and Read uncomitted.\nReference\n* https://en.wikipedia.org/wiki/Isolation_(database_systems)\n\
      * Wikipedia"
  - question: "Fill in the Blank.\n_________________ is the base interface for all transaction\
      \ managers that can be used inthe Spring framework’s transaction infrastructure."
    correct:
      - "PlatformTransactionManager"
    other:
      - "TransactionManager"
      - "PlatformManager"
    explanation: "Explanation: For defining a Transaction, a bean named PlatformTransactionManager\
      \ is declared. A class implementing this interface like JmsTransactionManager,\
      \ JpaTransactionManager etc which supply transaction management for transactional\
      \ resource are used.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#transaction-programmatic\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these annotation is used to annotate exactly one configuration\
      \ class in an application for enabling annotation-driven transaction management?"
    correct:
      - "@EnableTransactionManagement"
    other:
      - "@TransactionManagement"
      - "@EnableTransaction"
      - "@Transactional"
    explanation: "Explanation: To enable annotation-driven transaction management using\
      \ @Transactional, @EnableTransactionManagement annotation is used over configuration\
      \ class.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank.\n____________ determines the way an existing transaction\
      \ is used, depending on the attribute configured in the @Transactional annotation\
      \ over a method."
    correct:
      - "Transaction Propagation"
    other:
      - "Transaction Value"
      - "Transaction Management"
    explanation: "Explanation: Transaction propagation determines the way an existing\
      \ transaction is used, depending on the transaction propagation configured in\
      \ the @Transactional annotation on the method, when the method is invoked. There\
      \ are seven different options available like MANDATORY, NESTED, NEVER etc which\
      \ can be configured using @Transactional annotation.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#tx-propagation\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Spring Transaction Management, the annotation @Transactional can be\
      \ used over which places?"
    correct:
      - "Both A and B"
    other:
      - "Methods"
      - "Classes"
      - "Fields"
    explanation: "Explanation: The annotation @Transactional when applied over class,\
      \ it is applicable to all the methods existing in that particular class. The annotation\
      \ can be even applied to individual methods so that it is applicable only to that\
      \ method.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#transaction-declarative-annotations\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "According to Spring Transaction Management default rollback policy, in\
      \ which of these exceptions automatic rollback takes place?"
    correct:
      - "Unchecked Exceptions"
    other:
      - "Checked Exceptions"
      - "Both A and B"
    explanation: "Explanation: The default rollback policy of Spring transaction management\
      \ is that automatic rollback only takesplace in the case of an unchecked exception\
      \ being thrown.\nThe types of exceptions that are to cause a rollback can be configured\
      \ using the rollbackForelement of the @Transactional annotation.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#transaction-declarative\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "In Transaction Management, Which characteristic of Transaction describes\
      \ the Unit of Work?"
    correct:
      - "Atomicity"
    other:
      - "Durability"
      - "Consistency"
      - "Isolation"
    explanation: "Explanation: The unit of work means \"all or nothing\". In other words,\
      \ either transaction is successful and performed or unsuccessful and not performed,\
      \ which is nothing but Atomicity.\nReference\n* https://en.wikipedia.org/wiki/ACID\n\
      * Wikipedia"
  - question: "Fill in the blanks.  \nSelect the one that applies best. REST is ______,\
      \ and usually uses the ______ protocol."
    correct:
      - "stateless, HTTP"
    other:
      - "stateful, HTTP"
      - "stateless, REST"
      - "stateful, REST"
    explanation: "Explanation:There is no protocol called REST.\nReference\nRepresentational\
      \ state transfer\n* http://en.wikipedia.org/wiki/Representational_state_transfer\n\
      * Wikipedia"
  - question: "Which of these is true about using Spring Boot for JPA?"
    correct:
      - "Spring Boot provides starter module that provides all dependencies for\
        \ using JPA in an application."
      - "Spring Boot provides default properties for JPA."
      - "Spring Boot provides beans that are required for JPA."
    other: [ ]
    explanation: "Explanation: Spring Boot provides all the requirements like beans,\
      \ dependencies, properties as it autoconfigures based on the library available\
      \ on classpath.It makes the developement easier and faster while developing JPA\
      \ applications.\nReference:\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/spring-framework-reference/data-access.html#orm-jpa-tx\n\
      * Spring Framework Reference Documentation 5.0.7 RELEASE"
  - question: "Which of these Transaction Manager is recommended while using JPA with\
      \ single entity manager factory in Spring Applications?"
    correct:
      - "JpaTransactionManager"
    other:
      - "JtaTransactionManager"
      - "PlatFormTransactionManager"
    explanation: "Explanation: While using single entity manager factory, spring recommends\
      \ usage of JpaTransactionManager. If the application has multiple entity manager\
      \ factories that are to be Transactional then JtaTransactionManager must be used.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html\n\
      * Spring Framework Reference Documentation 5.7 RELEASE"
  - question: "Which of these Transaction Manager is used while using JPA with multiple\
      \ entity manager factories in Spring Applications?"
    correct:
      - "JtaTransactionManager"
    other:
      - "JpaTransactionManager"
      - "PlatFormTransactionManager"
    explanation: "Explanation: While using multiple entity manager factories, spring\
      \ recommends usage of JtaTransactionManager. If the application has single entity\
      \ manager factory that are to be Transactional then JpaTransactionManager must\
      \ be used.\nReference\n* https://docs.spring.io/spring/docs/5.0.7.RELEASE/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html\n\
      * Spring Framework Reference Documentation 5.7 RELEASE"
  - question: "Which of these scopes are available for beans in Spring framework? Select\
      \ all that apply."
    correct:
      - "prototype"
      - "websocket"
      - "singleton"
    other:
      - "webapp"
    explanation: "Explanation: There are six scopes for beans in Spring framework namely\
      \ singleton, prototype, request, application, session and websocket.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-scopes\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used for lazy initialization of beans in\
      \ Spring framework?"
    correct:
      - "@Lazy"
    other:
      - "@LazyInitialization"
      - "@LazyBeanInitialization"
    explanation: "Explanation: @Lazy Annotation can be applied over class or method\
      \ with @Bean annotation. When this annotation is used over class, all the bean\
      \ definitions inside that class are lazily intialized. When it is applied over\
      \ a particular method, then the bean returned by that method is lazely initialized.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-lazy-init\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "On which of these the annotation @Lazy can be used?"
    correct:
      - "Both A and B"
    other:
      - "Methods"
      - "Classes"
      - "Fields"
    explanation: "Explanation: @Lazy Annotation can be applied over class or method\
      \ with @Bean annotation. When this annotation is used over class, all the bean\
      \ definitions inside that class are lazily intialized. When it is applied over\
      \ a particular method, then the bean returned by that method is lazely initialized.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-lazy-init\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "The annotation @Lazy is used over methods along with the __________ annotation\
      \ so that the method is a bean definition, and that bean is lazely initialized."
    correct:
      - "@Bean"
    other:
      - "@Configuration"
      - "@Component"
    explanation: "Explanation: @Lazy Annotation can be applied over class or method\
      \ with @Bean annotation. When this annotation is used over class, all the bean\
      \ definitions inside that class are lazily intialized. When it is applied over\
      \ a particular method, then the bean returned by that method is lazely initialized.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-lazy-init\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is the default scope for beans in Spring Framework?"
    correct:
      - "singleton"
    other:
      - "session"
      - "prototype"
      - "request"
    explanation: "Explanation: Spring Beans are created during creation of application\
      \ context. They are eagerly initialized. This behaviour can be altered by using\
      \ the annotation @Lazy. These beans are destroyed when the context is destroyed.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-scopes\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these are supported by Spring Security? Select all that apply."
    correct:
      - "Hashing"
      - "Salting"
      - "Authentication"
      - "Authorization"
    other: [ ]
    explanation: "Explanation: Authentication and Authorization both are supported out\
      \ of the box by the Spring Security. Hashing is the process of calculating hash-value\
      \ for a given password. Both Salting and Hashing stores the password in database\
      \ in encoded hash format. It improves the security of the password.\nReference\n\
      * https://docs.spring.io/spring- security/site/docs/5.0.7.RELEASE/reference/htmlsingle/#core-services-password-encoding\n\
      * Spring Security Reference Documentation 5.0.7 RELEASE"
  - question: "Fill in the Blank\nThe __________ mode of JDBC should be disabled so\
      \ that sets of actions can be reverted \nback if any failure occurs during a transaction."
    correct:
      - "AutoCommit"
    other:
      - "Rollback"
      - "Transaction"
    explanation: "Explanation:\nReference\n*  https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html\n\
      *  Oracle Documentation"
  - question: "Which of these annotation is used over configuration classes for providing\
      \ properties as key-value pairs?"
    correct:
      - "@PropertySource"
    other:
      - "@Import"
      - "@ImportSource"
    explanation: "Explanation: @PropertyResource annotation is used to provide system\
      \ properties of JVM, system environment variables, properties files etc. This\
      \ annotation is used over configuration classes.\nExample\n\t@Configuration\n\t\
      @PropertySource(\"classpath:studentinfo.properties\")\n\tpublic class StudentConfiguration\
      \ {\n\t}\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#propertysource\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is true about the annotation @PropertyResource in Spring\
      \ Framework?"
    correct:
      - "It is used to provide properties files path."
      - "It is used to provide system properties of JVM."
      - "It is used to provide system environment variables."
    other:
      - "It is used to intitialize spring beans."
    explanation: "Explanation: @PropertyResource annotation is used to provide system\
      \ properties of JVM, system environment variables, properties files etc. This\
      \ annotation is used over configuration classes. It is never used to initialize\
      \ beans.\nExample\n\t@Configuration\n\t@PropertySource(\"classpath:studentinfo.properties\"\
      )\n\tpublic class StudentConfiguration {\n\t}\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#propertysource\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the Blank.\nIn Spring Framework, Objects created by the Spring\
      \ container are called as ___________."
    correct:
      - "Beans"
    other:
      - "Spring Objects"
      - "POJOS"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-introduction\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is true about the annotation @PropertySource?"
    correct:
      - "It is applied over Configuration classes."
    other:
      - "It is applied over fields."
      - "It is applied over Methods."
    explanation: "Explanation: To provide system variable properties, system properties\
      \ of JVM, properties file path etc, the annotation @PropertySource is used. It\
      \ is used for Configuration classes.\nExample\n\t@Configuration\n\t@PropertySource(\"\
      classpath:studentinfo.properties\")\n\tpublic class StudentConfiguration {\n\t\
      }\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#propertysource\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the Blank.\nIn Spring Bean life cycle, ________________ is used\
      \ to modify spring bean meta-data prior to the intialization of beans."
    correct:
      - "BeanFactoryPostProcessor"
    other:
      - "BeanFactoryProcessor"
      - "BeanPostProcessor"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-factory-extension-factory-postprocessors\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Fill in the Blank.\nA _____________  is an interface that defines callback\
      \ methods that allow for modification of bean instances."
    correct:
      - "BeanPostProcessor"
    other:
      - "BeanFactoryPostProcessor"
      - "BeanProcessor"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used for executing method just after properties\
      \ have been set for beans?"
    correct:
      - "@PostConstruct"
    other:
      - "@PreConstruct"
      - "@PostDestroy"
      - "@PreDestroy"
    explanation: "Explanation: @PostConstruct method is executed after properties have\
      \ been set for beans, Any initialization or setup activity can be implemented\
      \ inside method with the annotation @PostConstruct over it.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-postconstruct-and-predestroy-annotations\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used for executing method just before destruction\
      \ of beans in the container?"
    correct:
      - "@PreDestroy"
    other:
      - "@PreConstruct"
      - "@PostDestroy"
      - "@PostConstruct"
    explanation: "Explanation: Any clean up activity or closing the resources can be\
      \ implemented inside a method with the annotation @PreDestroy so that they get\
      \ executed just before the beans are destroyed by the container.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-postconstruct-and-predestroy-annotations\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these proxies are available in Spring Framework?"
    correct:
      - "Both A and B"
    other:
      - "CGLIB Proxy"
      - "JDK Dynamic Proxy"
    explanation: "Explanation: Spring Framework is able to create two type of proxy\
      \ objects namely JDK Dynamic Proxy and CGLIB Proxy. In JDK Dynamic Proxy, it creates\
      \ a proxy object that implements all the interfaces implemented by the object\
      \ to be proxied. In CGLIB Proxy, it creates a subclass of the class of the object\
      \ to be proxied.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#aop-proxying\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used for achieving Dependency Injection\
      \ in Spring Framework?"
    correct:
      - "@Autowired"
    other:
      - "@Component"
      - "@Qualifier"
      - "@Required"
    explanation: "Explanation: The annotation @Autowired is used for injecting a bean\
      \ inside an another bean. In other words, dependency of one bean is injected in\
      \ another bean.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-autowired-annotation\n\
      Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "In Spring Framework, By using which types Autowiring can be achieved?"
    correct:
      - "All of the above"
    other:
      - "byType"
      - "byName"
      - "by using a constructor"
    explanation: "Explanation: \nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-autowired-annotation\n\
      Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is used for achieving Dependency Injection in Spring Framework?"
    correct:
      - "Autowiring"
    other:
      - "Beanwiring"
      - "Dependencywiring"
    explanation: "Explanation: By using Autowiring, dependency of one bean is injected\
      \ in an another bean. It can be achieved by using @Autowired annotation.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-autowired-annotation\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used to inject literal values into fields?"
    correct:
      - "@Value"
    other:
      - "@Qualifier"
      - "@Required"
      - "@Primary"
    explanation: "Explanation:The annotation @Value is used over fields or setter methods\
      \ so that the value which is inside properties file can be injected into the field.\n\
      Reference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/beans/factory/annotation/Value.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation resolves the conflict when there are multiple\
      \ beans configured for same class during Autowiring?"
    correct:
      - "@Qualifier"
    other:
      - "@Component"
      - "@Primary"
    explanation: "Explanation: If there are multiple candidates of same class are declared\
      \ in the configuration file, Autowiring takes place by resolving the conflict\
      \ by using the class mentioned along with the annotation @Qualifier.\nReference\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-autowired-annotation\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is used over class so that the Spring Container\
      \ recognizes it as Spring Bean for creating an Object?"
    correct:
      - "@Component"
    other:
      - "@Configuration"
      - "@Primary"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these annotation is stereo type annotation? Select all that\
      \ apply."
    correct:
      - "@Repository"
      - "@Component"
      - "@Service"
      - "@Controller"
    other: [ ]
    explanation: "Explanation: Stereotype Annotations are used over classes for specific\
      \ purpose. Based on the layer in an application, these annotation are used. @Controller\
      \ is used in controller layer, @Service used in service layer, @Repository is\
      \ used in DAO layer of the the application.\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "In Spring AOP, different types of this include \"around\", \"before\"\
      \ and \"after\"."
    correct:
      - "Advice"
    other:
      - "Aspect"
      - "Join point"
      - "Pointcut"
    explanation: "Explanation:\nReference\n* http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      * Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In which of these module, \"Around Advice\", \"Before Advice\", \"After\
      \ Advice\" terminologies are used?"
    correct:
      - "Spring AOP"
    other:
      - "Spring Security"
      - "Spring OXM"
      - "Spring JDBC"
    explanation: "Reference\n* http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      * Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Java based configuration, which of these annotation is used over Configuration\
      \ classes which indicate that the class contains Bean Definitions?"
    correct:
      - "@Configuration"
    other:
      - "@Component"
      - "@Autowired"
      - "@Primary"
    explanation: "Explanation: In Java based configuration, instead of writing bean\
      \ configurations inside a xml file, we choose to write bean definitions inside\
      \ a class. That class is annotated with @Configuration, which means that particular\
      \ class contains bean definitions in form of methods with @Bean annotation.\n\
      Example:\n       @Configuration\n       public class AppConfiguration {\n    \
      \   @Bean\n       public Student getStudent() {\n\treturn new Student();\n   \
      \    }\n     }\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html\n\
      * Spring Framework Reference Documentation 5.2.7 RELEASE"
  - question: "Which of these annotation is used in Java Based Configuration over methods\
      \ which indicate Bean Definitions?"
    correct:
      - "@Bean"
    other:
      - "@Configuration"
      - "@Component"
      - "@Autowired"
    explanation: "Explanation: In Java based configuration, instead of writing bean\
      \ configurations inside a xml file, we choose to write bean definitions inside\
      \ a class. That class is annotated with @Configuration, which means that particular\
      \ class contains bean definitions in form of methods with @Bean annotation.\n\
      Example:\n       @Configuration\n       public class AppConfiguration {\n    \
      \   @Bean\n       public Student getStudent() {\n\treturn new Student();\n   \
      \    }\n     }\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html\n\
      * Spring Framework Reference Documentation 5.2.7 RELEASE"
  - question: "Which of these is true about the annotation @Bean in spring bean life-cycle?"
    correct:
      - "It configures autowiring whether by name or type."
      - "It configures a method to be called on bean before it is destroyed (destroy\
        \ method)."
      - "It configures a method to be called during bean intialization (init method)."
    other:
      - "It doesnot specify name and aliases of the bean."
    explanation: "Explantation: An alias name can be written along with @Bean annotation.\
      \ This name is used as bean reference. If no name is given, the default name is\
      \ the name of the method annotated with @Bean annotation.\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#beans-java-basic-concepts\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these symbols is used in the expressions of @Value annotation?\
      \ Select all that apply."
    correct:
      - "$"
      - "#"
    other:
      - "&"
      - "^"
    explanation: "Explanation: Expressions starting with $ reference a property name\
      \ inside in the application's environment, where as Expressions starting with\
      \ # are Spring Expression language expressions which are parsed by spEL parser.\n\
      Reference:\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#expressions-beandef\n\
      * https://docs.spring.io/spring/docs/5.0.3.RELEASE/javadoc-api/org/springframework/expression/spel/standard/SpelExpressionParser.html\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is can be referenced using spEL(Spring Expression Language)?\
      \ Select all that apply."
    correct:
      - "static methods and static fields."
      - "system environment properties"
      - "properties and methods in spring beans."
    other: [ ]
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/5.0.3.RELEASE/spring-framework-reference/core.html#expressions\n\
      * Spring Framework Reference Documentation 5.0.3 RELEASE"
  - question: "Which of these is true about @Profile annotation for providing String\
      \ expression for its attribute?"
    correct:
      - "Both examples are correct"
    other:
      - "No, It is not possible"
      - "This is the correct example of it: @Profile(\"!c & !d\")"
      - "This is the correct example of it: @Profile(\"!a\")"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html\n\
      * https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html\n\
      * Spring Boot Documentation\n* Spring Reference Documentation"
  - question: "How can you create an application context from multiple files, which\
      \ annotation can you use to combine multiple configuration files?"
    correct:
      - "@Import({Demo1.class, Demo2.class})"
    other:
      - "@Import(Demo1.class, Demo2.class)"
      - "@Imports(Demo1.class, Demo2.class)"
      - "@Include(Demo1.class, Demo2.class)"
    explanation: "Explanation:\nReferences:\n* https://docs.spring.io/spring-javaconfig/docs/1.0.0.M4/reference/html/ch04s03.html"
  - question: "Which of the statements are true?"
    correct:
      - "Environment object are used to read value/data from properties files"
      - "@PropertySource annotation contributes to define additional properties"
      - "@Order is used to define sort order for components annotated with this\
        \ annotation."
    other:
      - "@Import annotation is used to import only ONE @Configuration class."
    explanation: "Explanation: @Import annotation is used to import only or more @configuration\
      \ classes.\nReference\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html\n\
      * Spring Framework Reference Documentation"
  - question: "The annotation @Profile annotation can be used over ___________."
    correct:
      - "Method or Class"
    other:
      - "Class"
      - "Method"
      - "Field"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring-boot/docs/1.1.x/reference/html/boot-features-profiles.html\n\
      * Spring Boot Reference Documentation"
  - question: "In which of these, the @Lazy annotation is correctly used?"
    correct:
      - "@Lazy"
    other:
      - "@Scope(\"Lazy\")"
      - "@Lazy(false)"
      - "@Lazy(\"true\")"
    explanation: "Explanation: It can be used either as @Lazy or @Lazy(value=boolean),\
      \ where boolean can be either true or false. It specifies whether lazy initialization\
      \ should occur.\nReference:\n* https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Lazy.html\n\
      * Spring Framework Reference Documentation"
  - question: "Spring application contexts can be bootstrapped in:"
    correct:
      - "All of these"
    other:
      - "Web Application"
      - "JUnit system test"
      - "Standalone application"
    explanation: "Explanation:\nReference:"
  - question: "When the bean is not associated to the profile using @profile():"
    correct:
      - "The bean is available on each profile"
    other:
      - "The bean is only available on default profile"
      - "A & C"
      - "The bean must be implicitly associated to the profile using"
    explanation: "Explanation:\nReference:\nhttps://docs.spring.io/spring/docs/4.1.0.RELEASE/spring-framework-reference/htmlsingle/#beans-definition-profiles-default"
  - question: "Which of these annotation is used to bind String Query Parameters of\
      \ an URL to Controller class method arguments?"
    correct:
      - "@RequestParam"
    other:
      - "@ResponseBody"
      - "@RequestBody"
      - "@PathVariable"
    explanation: "Explanation: The following Controller class method can be accessed\
      \ by using the URL\nhttp://localhost:8080/myapp/name/firstName=\"john\"?lastName=\"\
      mckenzie\" , where firstName and lastName are query parameters which are bind\
      \ to local variables of a Controller method nameCheck. The value of firstName\
      \ gets stored in fname variable and the value of lastName gets stored in lname\
      \ variable.\n  @Controller\n  public class NameController {\n    @RequestMapping(\"\
      /name\")\n\tpublic void nameCheck( @RequestParam String fname, @RequestParam String\
      \ lname)         {\n                             ------\n        }\n  }\nReference\n\
      * https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RequestParam.html\n\
      * Spring Framework Reference Documentation 5.2.7 RELEASE"
  - question: "Which of these annotation is used to bind a part of an URL to Controller\
      \ class method arguments?"
    correct:
      - "@PathVariable"
    other:
      - "@ResponseBody"
      - "@RequestParam"
      - "@RequestBody"
    explanation: "Explanation:\nReference\n* https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\n\
      * Spring Framework Reference Documentation 5.2.7 RELEASE"
  - question: "Which of these are HTTP verbs which are used as actions to execute on\
      \ the resources? Select all that apply."
    correct:
      - "GET"
      - "PUT"
      - "POST"
      - "DELETE"
      - "HEAD"
    other:
    explanation: "Explanation:\nReference\nMore on REST:\n* https://en.wikipedia.org/wiki/Representational_state_transfer\n\
      * Wikipedia"
  - question: "Which of these HTTP actions are considered to be safe operations?"
    correct:
      - "GET"
    other:
      - "PUT"
      - "POST"
      - "DELETE"
    explanation: "Explanation:\nReference\nMore on REST:\n* https://en.wikipedia.org/wiki/Representational_state_transfer\n\
      * Wikipedia"
  - question: "Which of these HTTP actions are considered to be idempotent?"
    correct:
      - "GET"
      - "PUT"
      - "DELETE"
    other:
      - "POST"
    explanation: "Explanation: POST action is neither safe nor idempotent.\nReference\n\
      More on REST:\n* https://en.wikipedia.org/wiki/Representational_state_transfer\n\
      * Wikipedia"
  - question: "Which of these is true about Spring MVC annotations @RequestMapping and\
      \ @GetMapping?  Select all that apply."
    correct:
      - "@GetMapping will never handle HTTP POST calls."
      - "@RequestMapping can handle HTTP POST calls."
    other:
      - "There is no such annotation as @GetMapping."
      - "They are exactly the same."
    explanation: "Explanation:\n@GetMapping will handle HTTP GET calls only.\n@RequestMapping\
      \ can handle HTTP POST calls.\nReference\n1.4.2. Request Mapping\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc-ann-requestmapping"
  - question: "Which of these is the one being described below?  Select the one that\
      \ applies best.\n\nIt is a stereotype annotation that is itself annotated with\
      \ @Controller and @ResponseBody.  As compared to controllers, classes that are\
      \ annotated with this, have their @RequestMapping methods assume @ResponseBody\
      \ semantics by default."
    correct:
      - "@RestController"
    other:
      - "@ResponseBodyComponent"
      - "@RestComponent"
      - "@ResponseBodyController"
    explanation: "Explanation:\nThere is no @RestComponent, @ResponseBodyController,\
      \ or @ResponseBodyComponent for this purpose.\nReference\nCreating REST Controllers\
      \ with the @RestController annotation\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-restcontroller\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true about Spring AOP proxies?  Select all that apply."
    correct:
      - "Spring AOP proxies that uses the standard JDK dynamic proxies cannot work\
        \ with target objects that does not expose the target methods through interfaces."
      - "CGLIB classes are under the org.springframework.cglib package and included\
        \ in the spring-core jar."
      - "Spring AOP uses JDK dynamic proxies for AOP proxies by default."
      - "CGLIB is necessary when proxying objects that does not implement any interface."
    other: [ ]
    explanation: "The Aspect-Oriented Programming  /  Which are the limitations of the\
      \ two proxy-types?\nExplanation\nReference\n8.1.3. AOP Proxies\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-proxies\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n8.6. Proxying mechanisms\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-proxying\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blank.  In Spring MVC, some of the values returned by _____________\
      \ are:  a String, a View, or a ModelAndView."
    correct:
      - "Controller handler methods"
    other:
      - "HandlerMapping methods"
      - "Model methods"
      - "View Resolvers methods"
    explanation: "Explanation:\nReference\nSupported method return types\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are properties of the @Transactional annotation?  Select\
      \ all that apply."
    correct:
      - "noRollbackFor"
      - "noRollbackForClassname"
      - "rollbackForClassname"
    other:
      - "rollback"
    explanation: "Explanation:\nThe Spring Reference mentions that, the default @Transactional\
      \ settings include below.\n     Any RuntimeException triggers rollback, and any\
      \ checked Exception does not.\nThe Spring Reference describes  (below) some of\
      \ the possible ways of changing the default settings of the @Transactional annotation.\n\
      \     rollbackFor\n          Type:  Array of Class objects, which must be derived\
      \ from Throwable.\n          Description:  Optional array of exception classes\
      \ that must cause rollback.\n     rollbackForClassName\n          Type:  Array\
      \ of class names. Classes must be derived from Throwable.\n          Description:\
      \  Optional array of names of exception classes that must cause rollback.\n  \
      \   noRollbackFor\n          Type:  Array of Class objects, which must be derived\
      \ from Throwable.\n          Description:  Optional array of exception classes\
      \ that must not cause rollback.\n     noRollbackForClassName\n          Type:\
      \  Array of String class names, which must be derived from Throwable.\n      \
      \    Description:  Optional array of names of exception classes that must not\
      \ cause rollback.\nReference\n@Transactional settings\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-attransactional-settings\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is the HTTP response code when the request is considered\
      \ forbidden  (HttpStatus.FORBIDDEN)?"
    correct:
      - "403"
    other:
      - "203"
      - "303"
      - "503"
    explanation: "Explanation\nReference\nEnum HttpStatus\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "In Spring AOP, which of these can prevent execution from proceeding to\
      \ the join point?  Select all that apply."
    correct:
      - "Around advice"
      - "Before advice"
    other:
      - "After returning advice"
      - "After throwing advice"
    explanation: "Explanation:\nIf the Before advice throws an exception, the join point\
      \ will not be called.\nBy not calling the 'proceed()' on the ProceedingJoinPoint\
      \ parameter of the Around advice method, the join point  (target method) will\
      \ not be executed.\n'After returning advice' and 'After throwing advice' are involved\
      \ only after the execution of the join point.\nReference\n8.3.3. Declaring advice\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-schema-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these can fill the blank below, to protect access to '/driver'?\n\
      \n     protected configure(HttpSecurity http) throws Exception {\n\t  http.authorizeRequests()._______________(\"\
      /driver\").hasRole(\"DRIVER\");\n     }"
    correct:
      - "mvcMatchers"
    other:
      - "withUrl"
      - "on"
      - "match"
    explanation: "Explanation:\nThere is no 'on', 'match', nor 'withUrl' methods for\
      \ this purpose.\nReference\n39.2 MvcRequestMatcher\n  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#mvc-requestmatcher"
  - question: "On which can the @Transactional annotation be applied on?  Select all\
      \ that apply."
    correct:
      - "Class"
      - "Method"
    other:
      - "Method Parameter"
      - "Method Return Type"
    explanation: "Explanation:\nWhen a class is annotated with @Transactional, it is\
      \ the same as annotating all the methods with @Transactional.\nReference\n11.5.6.\
      \ Using @Transactional\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-annotations\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these advices, when used, will have a chance to execute some\
      \ code before the join point is executed?  Select all that apply."
    correct:
      - "@Before"
      - "@Around"
    other:
      - "@AfterReturning"
      - "@After"
    explanation: "Explanation\n@AfterReturning and @After advices are executed only\
      \ after (not before) the target method is executed.\nReference\n8.2.4. Declaring\
      \ advice\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true in Spring web?  Select all that apply."
    correct:
      - "Below can be used in specifying the @Configuration classes to be considered\
        \ for a web application context, in web.xml.\n\n        <init-param>\n     \
        \       <param-name>contextConfigLocation</param-name>\n            <param-value>com.myPackage.MvcConfig</param-value>\n\
        \        </init-param>"
      - "The 'session' and 'websocket' bean scopes are only valid in the context\
        \ of a web-aware Spring ApplicationContext"
      - "AnnotationConfigWebApplicationContext can be used inside the web.xml when\
        \ configuring a web application context."
    other:
      - "The 'web' and 'request' bean scopes are only valid in the context of a\
        \ web-aware Spring ApplicationContext"
    explanation: "Explanation:\nAnnotationConfigWebApplicationContext can be used inside\
      \ the web.xml when configuring a web application context.  Below is an example.\n\
      \    <context-param>\n        <param-name>contextClass</param-name>\n        <param-value>\n\
      \            org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n\
      \        </param-value>\n    </context-param>\nBelow can be used in specifying\
      \ the @Configuration classes to be considered for a web application context, in\
      \ web.xml.\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n\
      \            <param-value>com.myPackage.MvcConfig</param-value>\n        </init-param>\
      \ \nThe following bean scopes are only valid in the context of a web-aware Spring\
      \ ApplicationCon session, request, application, websocket.  There is no\
      \ 'web' bean scope out of the box.\nReference:\nSupport for web applications with\
      \ AnnotationConfigWebApplicationContext\n  *https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-java-instantiating-container-web\n\
      1.5. Bean scopes\n  *https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factory-scopes"
  - question: "Which of these is true about the names of beans?  Select all that apply."
    correct:
      - "You are not required to supply a name or id for a bean."
      - "@Bean(name={\"name1\",\"name2\"}) \nis a valid code."
    other:
      - "@Bean(alias={\"name1\",\"name2\"})\nis a valid code."
      - "@Bean has an 'id' attribute."
    explanation: "Explanation\nReference\nBean\n  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/javadoc-api/org/springframework/context/annotation/Bean.html"
  - question: "Which of these are true regarding the JdbcTemplate class?  Select all\
      \ that apply."
    correct:
      - "It can use the RowCallbackHandler interface which extracts values from\
        \ each row of a ResultSet."
      - "It performs iteration over ResultSets and extraction of returned parameter\
        \ values."
      - "It catches JDBC exceptions and translates them to the generic, more informative,\
        \ DataAccessException exception hierarchy."
    other:
      - "JdbcTemplate simplifies Hibernate data access code."
    explanation: "Explanation:\nJdbcTemplate simplifies JDBC data access code.  Hibernate\
      \ support comes in with another template called HibernateTemplate.\nReference\n\
      13.2.1. JdbcTemplate\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about Spring bean lifecycle callback interfaces?\
      \  Select all that apply."
    correct:
      - "The DisposableBean interface specifies a single method, and the method\
        \ is named 'destroy'."
      - "Implementing the org.springframework.beans.factory.DisposableBean interface\
        \ allows a bean to get a callback when the container containing it is destroyed."
    other:
      - "The InitializingBean interface has a method named 'init' that allows a\
        \ bean to perform initialization work after all necessary properties on the\
        \ bean have been set by the container."
      - "InitializingBean has a method named 'postConstruct'."
    explanation: "Explanation:\nThe InitializingBean interface has a method named 'afterPropertiesSet'\
      \ that allows a bean to perform initialization work after all necessary properties\
      \ on the bean have been set by the container.\nReference\nLifecycle callbacks\n\
      \  *https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factory-lifecycle"
  - question: "Fill in the blanks.\n\nThe ____________ is the central interface within\
      \ a Spring application for providing configuration information to the application.\
      \ It is read-only at run time, but can be reloaded if necessary and supported\
      \ by the application. A number of classes implement the ____________ interface,\
      \ allowing for a variety of configuration options and types of applications."
    correct:
      - "ApplicationContext, ApplicationContext"
    other:
      - "@Configuration, @Configuration"
      - "ConnectionFactory, ConnectionFactory"
      - "Bean, Bean"
    explanation: "Explanation:\nThe page below says:\n     \"The ApplicationContext\
      \ is the central interface within a Spring application for providing configuration\
      \ information to the application. It is read-only at run time, but can be reloaded\
      \ if necessary and supported by the application. A number of classes implement\
      \ the ApplicationContext interface, allowing for a variety of configuration options\
      \ and types of applications.\"\nhttps://spring.io/understanding/application-context\n\
      Reference\nUnderstanding Application Context\n  *  https://spring.io/understanding/application-context"
  - question: "To enhance security when working with REST, the 'requires-channel' attribute\
      \ of the '<intercept-url>' element can be set to this value to enforce HTTPS channel\
      \ security,"
    correct:
      - "https"
    other:
      - "tls/https"
      - "ssl"
      - "tls/ssl"
    explanation: "Explanation:\nThe 'requires-channel' can be set to 'https' to enforce\
      \ HTTPS channel security.  The other possible values are 'http' and 'any'.\nBelow\
      \ is an example.\n     <intercept-url pattern=\"/**\" access=\"authenticated\"\
      \ requires-channel=\"https\"></intercept>\nReference\n4.3.2. Adding HTTP/HTTPS\
      \ Channel Security\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-requires-channel\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Fill in the 2 blanks.  ________ can be extended to create a repository.\
      \  Below is a way to activate it.\n\n     @Configuration\n     ________  (basePackages=\"\
      myPackage.myInstantRepos\")\n     public class MyInstantRepoConfiguration {}"
    correct:
      - "JpaRepository, @EnableJpaRepositories"
    other:
      - "JpaTemplate, @EnableSpringRepositories"
      - "JpaTemplate, @EnableJpaRepository"
      - "JpaTemplate, @EnableJpaRepositories"
    explanation: "Explanation:\nBelow is an example.\n     Item 1\n          package\
      \ myPackage.myInstantRepos;\n          .....\n          public interface MyInstantRepository\
      \ extends JpaRepository<MyClass, Long> {\n          }\n     Item 2\n         \
      \ @Configuration\n          @EnableJpaRepositories  (basePackages=\"myPackage.myInstantRepos\"\
      )\n          public class MyInstantRepoConfiguration {}\nReference\nInterface\
      \ JpaRepository\n  *  http://docs.spring.io/spring-data/jpa/docs/1.7.2.RELEASE/api/org/springframework/data/jpa/repository/JpaRepository.html\n\
      \  *  Spring Data JPA 1.7.2.RELEASE API\nAnnotation Type EnableJpaRepositories\n\
      \  *  http://docs.spring.io/spring-data/jpa/docs/1.7.2.RELEASE/api/org/springframework/data/jpa/repository/config/EnableJpaRepositories.html\n\
      \  *  Spring Data JPA 1.7.2.RELEASE API"
  - question: "Fill in the blanks.  Select the one that applies best.\n     REST is\
      \ ______, and usually uses the ______ protocol."
    correct:
      - "stateless, HTTP"
    other:
      - "stateful, HTTP"
      - "stateless, REST"
      - "stateful, REST"
    explanation: "Explanation:\nThere is no protocol called REST.\nReference\nRepresentational\
      \ state transfer\n  *  http://en.wikipedia.org/wiki/Representational_state_transfer\n\
      \  *  Wikipedia"
  - question: "Fill in the blanks.  Select the one that applies best.\n \n     ______\
      \  (in a class annotated with ______) enables MVC Java config."
    correct:
      - "@EnableWebMVC, @Configuration"
    other:
      - "@EnableMVC, @Configuration"
      - "@EnableMVC, @WebConfiguration"
      - "@EnableWebMVC, @WebConfiguration"
    explanation: "Explanation:\nThere is no @EnableMVC or @WebConfiguration for this\
      \ purpose.\nBelow is an example.\n     @Configuration\n     @EnableWebMvc\n  \
      \   public class MyConfig {}\nReference\n16.16.1. Enabling the MVC Java Config\
      \ or the MVC XML Namespace\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-config-enable\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about bean scopes?  Select all that apply?"
    correct:
      - "These scopes are supported out of the box:  singleton, prototype, request,\
        \ session, application, websocket."
    other:
      - "You can override the default scope with the 'scope' attribute of the @Bean\
        \ annotation."
      - "You can override the default scope with the @BeanScope annotation."
      - "The default scope is prototype."
    explanation: "Explanation\nThese scopes are supported out of the box:  singleton,\
      \ prototype, request, session, application, websocket.\nThe default scope is singleton.\n\
      You can override the default scope with the @Scope annotation.\n@Bean annotation\
      \ has no  'scope' attribute.\nReference\nSpecifying bean scope\n  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-java-specifying-bean-scope\n\
      1.5. Bean scopes\n  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factory-scopes"
  - question: "Which of these database system isolation levels is best described below?\n\
      \nIn this isolation level, dirty reads, non-repeatable reads and phantom reads\
      \ are all prevented."
    correct:
      - "Serializable"
    other:
      - "Read committed"
      - "Read uncommitted"
      - "Repeatable reads"
    explanation: "Explanation\nReference\nEnum Isolation\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/transaction/annotation/Isolation.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nIsolation (database systems)\n  *  http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels\n\
      \  *  Wikipedia"
  - question: "Which of these are true about security and Spring Security?  Select all\
      \ that apply."
    correct:
      - "Security is a cross-cutting concern."
      - "Spring secures method invocations using Spring AOP."
      - "Spring AOP is not the best solution if you need to secure in finer detail\
        \ than method invocations.  For example, if you need to secure domain objects\
        \ directly, AspectJ could be a better choice."
    other:
      - "Spring secures web requests using Spring AOP."
    explanation: "Explanation\nSpring secures web requests using standard Filters.\n\
      Reference\n1.5.1. Security and AOP Advice\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#security-and-aop-advice\n\
      \  *  Architecture and Implementation\n  *  Spring Security Reference, Version\
      \ 3.2.5.RELEASE"
  - question: "Which of these are true about Spring MVC controllers?  Select all that\
      \ apply."
    correct:
      - "The @Controller annotation acts as a stereotype for the annotated class,\
        \ indicating that it has the role of a controller."
      - "Controllers implemented using annotations do not have to extend specific\
        \ base classes or implement specific interfaces."
      - "Controllers implemented using @Controller are testable artifacts."
      - "Controllers implemented using annotations do not have direct dependencies\
        \ on Servlet or Portlet APIs."
    other: [ ]
    explanation: "Explanation\nControllers implemented using @Controller are testable\
      \ artifacts, because they are POJOs.\nReference\n16.3. Implementing Controllers\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-controller\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring Security, which of these is true?"
    correct:
      - "All of the above."
    other:
      - "<intercept-url> can be used to define URL patterns and how they should\
        \ be handled."
      - "FilterChainProxy is a Filter  (implements Java's Filter interface)."
      - "<filter-chain> is used to set up security filter chains.  It includes an\
        \ attribute where you can specify the filters that you prefer to use."
    explanation: "Explanation\nReference\n4.2.2. A Minimal Configuration\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-minimal\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      1.2. FilterChainProxy\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#filter-chain-proxy\n\
      \  *  Web Application Security\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Fill in the blanks.  ________ is an implementation of ________ for a\
      \ single JPA EntityManagerFactory.    It binds a JPA EntityManager from the mentioned\
      \ factory to the thread.  Select the one that applies best."
    correct:
      - "JpaTransactionManager, PlatformTransactionManager"
    other:
      - "JpaDataSource, DataSource"
      - "JpaEntity, Entity"
      - "JpaTemplate, Template"
    explanation: "JDBC, Transactions, And ORM  /  Are you able to participate in a given\
      \ transaction in Spring while working with JPA?\n Explanation\nReference:\n14.5.3.\
      \ Transaction Management\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/orm.html#orm-jpa-tx\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nClass JpaTransactionManager\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "Which of these are true regarding Spring transactions?  Select all that\
      \ apply."
    correct:
      - "The transaction name can be explicitly set only programmatically."
      - "You can call the 'commit' method of PlatformTransactionManager to issue\
        \ a commit."
      - "Instances of the TransactionTemplate class are threadsafe."
    other:
      - "You can call the 'rollbackTransaction' method of PlatformTransactionManager\
        \ to issue a rollback."
    explanation: "Explanation:\nYou can call the 'rollback' method of PlatformTransactionManager\
      \ to issue a rollback.\nReference\n11.6. Programmatic transaction management\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-programmatic\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.7. Choosing between\
      \ programmatic and declarative transaction management\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#tx-decl-vs-prog\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about @Query when working with database?  Select\
      \ all that apply."
    correct:
      - "Native SQL can be used with it."
      - "It can be used in Spring Data Jpa."
      - "It allows manual definition of the query to be executed by a repository\
        \ method."
      - "JPQL can be used with it."
    other: [ ]
    explanation: ""
  - question: "Which of these are true in relation to @RequestMapping in Spring MVC?\
      \  Select all that apply."
    correct:
      - "@PathVariable indicates that a method parameter will be bound to the value\
        \ of a URI template variable."
      - "@RequestMapping can be refined to accept only HTTP GET requests."
    other:
      - "Below is an invalid use of the @RequestMapping:\n@RequestMapping(\"/\")"
      - "A @RequestMapping on the class level is required."
    explanation: "Spring MVC and the Web Layer  /  What is the difference between @RequestMapping\
      \ and @GetMapping?\nExplanation\nA @RequestMapping on the class level is not required.\n\
      Reference\n16.3.2. Mapping Requests With @RequestMapping\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nURI Template Patterns\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is one of the places where Spring Boot refers to as a\
      \ property source?  Select all that apply."
    correct:
      - "Default properties (specified by setting SpringApplication.setDefaultProperties)"
      - "JNDI attributes from java:comp/env."
      - "OS environment variables"
    other:
      - "Application-properties.xml file outside of your packaged jar."
    explanation: "Explanation:\nThe Spring Boot reference documentation says:\n\"\n\
      Spring Boot uses a very particular PropertySource order that is designed to allow\
      \ sensible overriding of values. Properties are considered in the following order:\n\
      Devtools global settings properties on your home directory (~/.spring-boot-devtools.properties\
      \ when devtools is active).\n@TestPropertySource annotations on your tests.\n\
      @SpringBootTest#properties annotation attribute on your tests.\nCommand line arguments.\n\
      Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment\
      \ variable or system property).\nServletConfig init parameters.\nServletContext\
      \ init parameters.\nJNDI attributes from java:comp/env.\nJava System properties\
      \ (System.getProperties()).\nOS environment variables.\nA RandomValuePropertySource\
      \ that has properties only in random.*.\nProfile-specific application properties\
      \ outside of your packaged jar (application-{profile}.properties and YAML variants).\n\
      Profile-specific application properties packaged inside your jar (application-{profile}.properties\
      \ and YAML variants).\nApplication properties outside of your packaged jar (application.properties\
      \ and YAML variants).\nApplication properties packaged inside your jar (application.properties\
      \ and YAML variants).\n@PropertySource annotations on your @Configuration classes.\n\
      Default properties (specified by setting SpringApplication.setDefaultProperties).\n\
      \"\nReference\n24. Externalized Configuration\n  *  https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config"
  - question: "Which of these is the one being described below?  Select the one that\
      \ applies best.\n\n     This can be annotated on methods.  This indicates that\
      \ the return value should be written straight to the web response body (and not\
      \ into a Model, or as a view name)."
    correct:
      - "@ResponseBody"
    other:
      - "@RequestMapping"
      - "@RequestMethod"
      - "@RequestBody"
    explanation: "Explanation:\nThere is a RequestMethod but it is an Enum and not an\
      \ annotation, and is used for a different purpose.\n Reference\nMapping the response\
      \ body with the @ResponseBody annotation\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-responsebody\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring security, which of these is the attribute of the 'intercept-url'\
      \ element which can cause any matching request to bypass the filter chain entirely?"
    correct:
      - "filters"
    other:
      - "pattern"
      - "requires-channel"
      - "access"
    explanation: "Explanation\nThe Spring Security Reference says:\n     \"'filters'\
      \ can only take the value \"none\".  This will cause any matching request to bypass\
      \ the Spring Security filter chain entirely.  None of the rest of the <http> configuration\
      \ will have any effect on the request and there will be no security context available\
      \ for its duration. Access to secured methods during the request will fail.\"\n\
      Below is an example.\n     <intercept-url pattern=\"/**\" access=\"ROLE_USER\"\
      \ filters=\"none\" ></intercept>\nThe 'security' attribute of the 'http' element\
      \ is able to do something similar to what filters=\"none\" does.  Below is an\
      \ example.\n     <http pattern=\"/css/**\" security=\"none\"></http>\nThe Spring\
      \ Security Reference describes the 'security' attribute as:\n     \"A request\
      \ pattern can be mapped to an empty filter chain, by setting this attribute to\
      \ none. No security will be applied and none of Spring Security's features will\
      \ be available.\"\nReference\n2.1.18. \n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#nsa-intercept-url\n\
      \  *  Appendix\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Which of these is the Spring Boot starter that you would use for a Spring\
      \ REST application?"
    correct:
      - "None of the above."
    other:
      - "spring-boot-starter-rest"
      - "spring-boot-starter-mvc-rest"
      - "spring-boot-starter-web-rest"
    explanation: "Explanation:\nThere are no starters named:  spring-boot-starter-rest,\
      \ spring-boot-starter-web-rest, or spring-boot-starter-mvc-rest.\nspring-boot-starter-web\
      \ is the starter needed.\nThe Spring Boot reference documentation describes the\
      \ spring-boot-starter-web starter as below:\n     \"Starter for building web,\
      \ including RESTful, applications using Spring MVC. Uses Tomcat as the default\
      \ embedded container\""
  - question: "Which of these is true about the PropertySourcesPlaceholderConfigurer\
      \ class?  Select all that apply."
    correct:
      - "resolves ${...} placeholders within bean definition property values"
      - "resolves @Value annotations"
      - "specialization of PlaceholderConfigurerSupport"
    other:
      - "resolves @Autowired annotations"
    explanation: "Explanation:\nReference\nPropertySourcesPlaceholderConfigurer\n  *\
      \  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/javadoc-api/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.html"
  - question: "Fill in the blanks, such that all URLs starting with '/employee/' is\
      \ protected?\n\n     protected configure(HttpSecurity http) throws Exception {\n\
      \thttp\n\t\t.authorizeRequests()\n\t\t\t.________(\"/employee/________\").________(\"\
      EMPLOYEE\");\n     }"
    correct:
      - "antMatchers, **, hasRole"
    other:
      - "match, *, hasRole"
      - "match, **, roleAllowed"
      - "match, *, checkRole"
    explanation: "Explanation:\nThere is no 'match' method for this purpose.  There\
      \ is no 'checkRole' nor 'roleAllowed' method for this purpose.\n'/employee/**'\
      \ will match all URLs that start with '/employee/'.\nReference\n39.2 MvcRequestMatcher\n\
      \  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#mvc-requestmatcher"
  - question: "Which of these show a proper ordering of Spring Security filters?"
    correct:
      - "BasicAuthenticationFilter, AnonymousAuthenticationFilter, FilterSecurityInterceptor"
    other:
      - "ExceptionTranslationFilter, RememberMeAuthenticationFilter, ChannelProcessingFilter"
      - "ChannelProcessingFilter, FilterSecurityInterceptor, SecurityContextPersistenceFilter"
      - "RememberMeAuthenticationFilter, UsernamePasswordAuthenticationFilter, ChannelProcessingFilter"
    explanation: "Explanation:\nReference\n1.3. Filter Ordering\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#filter-ordering\n\
      \  *  Web Application Security\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Fill in the blanks.  Select the one that applies best.\n \n     In REST\
      \ services, HTTP status return codes are used.  The HTTP status return code ____,\
      \ means 'OK'.  The HTTP status return code ____, means 'No Content'."
    correct:
      - "200, 204"
    other:
      - "200, 400"
      - "100, 400"
      - "100, 204"
    explanation: "Explanation:\nReference\n16.12.3. Handling Standard Spring MVC Exceptions\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-rest-spring-mvc-exceptions\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nEnum HttpStatus\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "Which ones are true about the customization of bean initializations?\
      \  Select all that apply."
    correct:
      - "InitializingBean is not advisable to be used because it couples your application\
        \ to Spring."
      - "The afterPropertiesSet() method of the InitializingBean interface is where\
        \ you code your initialization customizations."
      - "In XML-based configuration, the 'init-method' attribute can be used only\
        \ with void no-argument methods."
    other:
      - "The init() method of the InitializingBean interface can be used."
    explanation: "Explanation:\nThe afterPropertiesSet() method of the InitializingBean\
      \ interface can be used.\nReference\nInitialization callbacks\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-lifecycle-initializingbean\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are called after all the bean's properties have been set\
      \  (in other words, after dependency injection is done)?  Select all that apply."
    correct:
      - "Methods annotated with @PostConstruct"
      - "afterPropertiesSet() as defined by the InitializingBean interface"
    other:
      - "Methods annotated with @PostSet"
      - "the class' constructor method"
    explanation: "Explanation:\nThere is no @PostSet annotation used in this context.\n\
      The class' constructor method is called before doing dependency injection.\nReference\n\
      Combining lifecycle mechanisms\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-lifecycle-combined-effects\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these advices, when used, will always have a chance to execute\
      \ some code after the join point execution, \nregardless on if the execution completes\
      \ normally or throws an exception?  Select all that apply."
    correct:
      - "@Around"
      - "@After"
    other:
      - "@AfterReturning"
      - "@AfterThrowing"
    explanation: "Explanation:\n@AfterReturning advices are executed only if the target\
      \ method completes normally  (without exception thrown).\n@AfterThrowing advices\
      \ are executed only if the target method completes abnormally  (with exception\
      \ thrown).\nReference\n8.2.4. Declaring advice\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about AOP and Spring AOP?"
    correct:
      - "All of the above."
    other:
      - "Spring AOP can be configured in two ways:  by XML and by annotations."
      - "AOP helps code be written once, reused, and not duplicated in many places."
      - "AOP helps unrelated codes be kept outside of the advised classes."
    explanation: "Explanation:\nReference\n8.1. Introduction\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In the code below, parm1, parm2, parm3 and parm4, are all inputs to the\
      \ controller method.  Which of them would most likely need to be annotated with\
      \ @RequestParam?  Select all that apply.\n\n     @RequestMapping(value=\"/parm1/{parm1}/parm2/{parm2}\"\
      , method=RequestMethod.GET)\n     public String findSomething(String parm1, String\
      \ parm2, String parm3, String parm4, Model model) {"
    correct:
      - "parm3"
      - "parm4"
    other:
      - "parm1"
      - "parm2"
    explanation: "Explanation:\nparm1 and parm2 looks like they use URI Template Patterns,\
      \ and therefore would need @PathVariable instead of @RequestParam.\nReference:\n\
      URI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nBinding request\
      \ parameters to method parameters with @RequestParam\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestparam\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Classes annotated with this are candidates for auto-detection  (for registration\
      \ as a Spring bean).   Select all that apply."
    correct:
      - "@Repository"
      - "@Component"
      - "@Service"
      - "@Controller"
    other: [ ]
    explanation: "Explanation:\nReference\n4.10.1. @Component and further stereotype\
      \ annotations\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-stereotype-annotations\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is described below?  Select the one that applies best.\n\
      \n     An instance of it is associated with a persistence context.  It is an API\
      \ that has methods for interacting with the persistence context, such as persist,\
      \ update, delete, etc."
    correct:
      - "EntityManager"
    other:
      - "PersistenceContext"
      - "Entity"
      - "PersistenceUnit"
    explanation: "Explanation:\nBelow is an example.\n     public class MyDaoImpl implements\
      \ MyDao {\n          @PersistenceContext\n          private EntityManager entityManager;\n\
      \          public Collection loadBySubject(String subjectId) {\n             \
      \  Query query = entityManager.createQuery(\"from Subject as p where p.subjectId\
      \ = :subjectId\");\n               query.setParameter(\"subjectId\", subjectId);\n\
      \               return query.getResultList();\n          }\n     }\n Reference\n\
      Interface EntityManager\n  *  http://docs.oracle.com/javaee/6/api/javax/persistence/EntityManager.html\n\
      \  *  Java Platform, Enterprise Edition 6 API Specification"
  - question: "This activity is the linking of aspects with other application types\
      \ or objects to create an advised object.  Spring AOP performs this at runtime.\
      \  Select the one that applies best."
    correct:
      - "Weaving"
    other:
      - "Spring configuration validation"
      - "Autowiring"
      - "Dependency Injection"
    explanation: "Explanation:\nReference\n8.1.1. AOP concepts\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true regarding security and Spring Security?  Select\
      \ all that apply."
    correct:
      - "Spring Security's PasswordEncoder helps in working with encoded passwords."
      - "A salt is an additional string of known data for each user which is combined\
        \ with the password before calculating the hash."
      - "A hash is a piece of fixed-length output data from some input data, using\
        \ a chosen algorithm."
    other:
      - "If the algorithm used to create the hash is known, it is relatively simple\
        \ to obtain the original value from the hash."
    explanation: "Explanation:\nThe Spring Security Reference says:\n     'Spring Security's\
      \ PasswordEncoder interface is used to support the use of passwords which are\
      \ encoded in some way in persistent storage.'\nThe Spring Security Reference says:\n\
      \     'A hash is \"one-way\" in the sense that it is very difficult (effectively\
      \ impossible) to obtain the original input given the hash value, or indeed any\
      \ possible input which would produce that hash value. This property makes hash\
      \ values very useful for authentication purposes. They can be stored in your user\
      \ database as an alternative to plaintext passwords and even if the values are\
      \ compromised they do not immediately reveal a password which can be used to login.\
      \ Note that this also means you have no way of recovering the password once it\
      \ is encoded.'\nReference\n2.3. Password Encoding\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#core-services-password-encoding\n\
      \  *  Architecture and Implementation\n  *  Spring Security Reference, Version\
      \ 3.2.5.RELEASE"
  - question: "Which of these are valid usages of Spring profiles?  Select all that\
      \ apply."
    correct:
      - "@Configuration\npublic class MyConfig {\n     @Profile({\"dev\",\"staging\"\
        })\n     @Bean\n     public MyService myService(){"
      - "@Profile({\"!production\"})\n@Configuration\npublic class MyConfig {"
      - "@Configuration\npublic class MyConfig {\n     @Profile({\"dev\"})\n   \
        \  @Bean\n     public MyService myService(){"
    other:
      - "@Profile({exclude=\"production\"})\n@Configuration\npublic class MyConfig\
        \ {"
    explanation: "Explanation:\nThe below code means that the active profile must be\
      \ anything other than 'production'.\n     @Profile({\"!production\"})\nThere is\
      \ no 'exclude' attribute in the @Profile annotation.\nReference\nContext configuration\
      \ with environment profiles\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/testing.html#testcontext-ctx-management-env-profiles\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nAnnotation Type\
      \ Profile\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/context/annotation/Profile.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "Which ones are true?  Select all that apply."
    correct:
      - "It is possible to override methods on container-managed beans, to return\
        \ the lookup result for another named bean in the container."
    other:
      - "To be able to do lookup method injection, the class that the Spring container\
        \ will subclass, must not be 'final', but the method to be overridden can be\
        \ 'final'."
      - "Spring does not use CGLIB in the implementation of the lookup method injection\
        \ feature."
      - "If bean A is a singleton, and it has a property bean B which is a non-singleton,\
        \ every time bean A is acquired by a client, a new instance of bean B is always\
        \ supplied."
    explanation: "Explanation:\nIf bean A is a singleton, and it has a property bean\
      \ B which is a non-singleton, every time bean A is acquired by a client, the same\
      \ instance of bean B is supplied.\nThe Spring Reference says:\n     \"Lookup method\
      \ injection is the ability of the container to override methods on container managed\
      \ beans, to return the lookup result for another named bean in the container.\
      \ The lookup typically involves a prototype bean as in the scenario described\
      \ in the preceding section. The Spring Framework implements this method injection\
      \ by using bytecode generation from the CGLIB library to generate dynamically\
      \ a subclass that overrides the method.\"\nSpring does use CGLIB library  (to\
      \ create proxies) in the implementation of the lookup method injection feature.\n\
      The Spring Reference says:\n     \"As of Spring 3.2 it is no longer necessary\
      \ to add CGLIB to your classpath, because CGLIB classes are repackaged under org.springframework\
      \ and distributed within the spring-core JAR. This is done both for convenience\
      \ as well as to avoid potential conflicts with other projects that use differing\
      \ versions of CGLIB.\"\nTo be able to do lookup method injection, the class to\
      \ have a method overridden, must not be 'final', and the method to be overridden\
      \ cannot be 'final' also.\nReference\n4.4.6. Method injection\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-method-injection\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true in Spring aspects-oriented programming?  Select\
      \ all that apply."
    correct:
      - "Due to the proxy-based nature of Spring's AOP framework, calls within the\
        \ target object are by definition not intercepted."
      - "If you are using CGLIB, public method calls on the proxy will be intercepted."
    other:
      - "If you are using JDK proxies, only public and protected interface method\
        \ calls on the proxy can be intercepted."
      - "If you are using CGLIB, private method calls on the proxy will be intercepted."
    explanation: "Explanation:\nThe Spring Reference documentation says:\n     \"Due\
      \ to the proxy-based nature of Spring's AOP framework, calls within the target\
      \ object are by definition not intercepted. For JDK proxies, only public interface\
      \ method calls on the proxy can be intercepted. With CGLIB, public and protected\
      \ method calls on the proxy will be intercepted, and even package-visible methods\
      \ if necessary. \"\nReference\n5.2.3. Declaring a pointcut\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#aop-pointcuts"
  - question: "Which of these are true in Spring aspects-oriented programming?  Select\
      \ all that apply."
    correct:
      - "Due to the proxy-based nature of Spring's AOP framework, calls within the\
        \ target object are by definition not intercepted."
      - "If you are using CGLIB, public method calls on the proxy will be intercepted."
    other:
      - "If you are using JDK proxies, only public and protected interface method\
        \ calls on the proxy can be intercepted."
      - "If you are using CGLIB, private method calls on the proxy will be intercepted."
    explanation: "Explanation:\nThe Spring Reference documentation says:\n     \"Due\
      \ to the proxy-based nature of Spring's AOP framework, calls within the target\
      \ object are by definition not intercepted. For JDK proxies, only public interface\
      \ method calls on the proxy can be intercepted. With CGLIB, public and protected\
      \ method calls on the proxy will be intercepted, and even package-visible methods\
      \ if necessary. \"\n Reference\n5.2.3. Declaring a pointcut\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#aop-pointcuts"
  - question: "Which 2 annotations can you put on the blanks below, to enable Spring's\
      \ annotation-driven transaction management capability?  Select 2.\n\n     ___________________\n\
      \     ___________________\n     public class MyClassToEnableSomething {"
    correct:
      - "@Configuration"
      - "@EnableTransactionManagement"
    other:
      - "@AnnotationDrivenTransaction"
      - "@EnableAnnotationTransaction"
    explanation: "Explanation:\nThere is no @EnableAnnotationTransaction or @AnnotationDrivenTransaction\
      \ for use in this context.\nThe Spring Reference documentation says the following\
      \ about @EnableTransactionManagement:\n     \"Enables Spring's annotation-driven\
      \ transaction management capability, similar to the support found in Spring's\
      \ <tx:*> XML namespace. To be used on @Configuration classes.....\"\n Reference\n\
      EnableTransactionManagement\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/javadoc-api/org/springframework/transaction/annotation/EnableTransactionManagement.html"
  - question: "Which of these are annotations can be applied on Spring MVC controller\
      \ method parameters?  Select all that apply."
    correct:
      - "@RequestHeader"
      - "@RequestParam"
      - "@ModelAttribute"
      - "@RequestBody"
    other: [ ]
    explanation: "Explanation:\n@RequestParam\n     For access to Servlet request parameters.\
      \ Parameter values are converted to the declared method argument type. \n@RequestHeader\n\
      \     For access to request headers. Header values are converted to the declared\
      \ method argument type. \n@ModelAttribute\n     For access to an existing attribute\
      \ in the model (instantiated if not present) with data binding and validation\
      \ applied. \n@RequestBody\n     For access to the HTTP request body. Body content\
      \ is converted to the declared method argument type using HttpMessageConverters.\n\
      Reference\nMethod Arguments\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments"
  - question: "The 'Autowired' annotation can be applied to the following  (select the\
      \ one that applies best):"
    correct:
      - "fields, constructors, methods"
    other:
      - "constructors and methods"
      - "fields, setters and getters"
      - "constructors"
    explanation: "Explanation:\nReference\n4.9.2. @Autowired\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-autowired-annotation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blanks.  The application server manages ________ through\
      \ the JTA.  ________ cannot work across multiple transactional resources. \nIn\
      \ the past, a common way to use ________ was through EJB CMT (Container Managed\
      \ Transaction)."
    correct:
      - "global transactions, local transactions, global transactions"
    other:
      - "local transactions, global transactions, local transactions"
      - "local transactions, local transactions, global transactions"
      - "global transactions, local transactions, local transactions"
    explanation: "Explanation:\nReference\n11.2.1. Global transactions\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-global\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.2.2. Local transactions\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-local\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring Boot, if the HSQLDB jar dependencies are on the classpath,\
      \ and there is no database connection bean has been manually configured, what\
      \ will happen?"
    correct:
      - "Spring Boot will auto-configure an in-memory database."
    other:
      - "An exception will be thrown."
      - "No auto-configuration will be done for HSQLDB."
      - "None of the above"
    explanation: "Spring Boot  /  How does it work? How does it know what to configure?\n\
      Explanation:\nThe Spring Boot reference documentation says:  \n     \"Spring Boot\
      \ auto-configuration attempts to automatically configure your Spring application\
      \ based on the jar dependencies that you have added. For example, if HSQLDB is\
      \ on your classpath, and you have not manually configured any database connection\
      \ beans, then Spring Boot auto-configures an in-memory database.\nYou need to\
      \ opt-in to auto-configuration by adding the @EnableAutoConfiguration or @SpringBootApplication\
      \ annotations to one of your @Configuration classes.\n[Tip]\nYou should only ever\
      \ add one @SpringBootApplication or @EnableAutoConfiguration annotation. We generally\
      \ recommend that you add one or the other to your primary @Configuration class\
      \ only.\"\n Reference\n16. Auto-configuration\n  *  https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#using-boot-auto-configuration"
  - question: "In the code below, parm1, parm2, parm3 and parm4, are all inputs to the\
      \ controller method.  Which of them would most likely need to be annotated with\
      \ @PathVariable?  Select all that apply.\n\n     @RequestMapping(value=\"/parm1/{parm1}/parm2/{parm2}\"\
      , method=RequestMethod.GET)\n     public String findSomething(String parm1, String\
      \ parm2, String parm3, String parm4, Model model) {"
    correct:
      - "parm1"
      - "parm2"
    other:
      - "parm3"
      - "parm4"
    explanation: "Spring MVC And The Web Layer  /  What are the differences between\
      \ @RequestParam and @PathVariable?\nExplanation:\nparm1 and parm2 looks like they\
      \ use URI Template Patterns, and therefore would need @PathVariable.\nReference\n\
      URI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nBinding request\
      \ parameters to method parameters with @RequestParam\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestparam\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which ones are true regarding this method in JdbcTemplate?  Select all\
      \ that apply.\n\n     public void execute(String sql)"
    correct:
      - "Just like most of the methods in JdbcTemplate, it can throw a DataAccessException."
      - "It can execute SQL 'insert' statements."
      - "It can execute SQL 'delete' statements."
    other:
      - "It cannot execute SQL DDL statements."
    explanation: "Explanation:\nIt can execute any arbitrary SQL, including DDL statements.\n\
      Reference\nOther jdbcTemplate operations\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate-examples-other\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blanks.  ______ and ______ can be used to secure service\
      \ layer ______.  Select the one that applies best."
    correct:
      - "@Secured, @PreAuthorize, methods"
    other:
      - "@Secure, @Authorize, classes"
      - "@Secure, @PreAuthorize, classes"
      - "@Secure, @Authorize, methods"
    explanation: "Explanation:\nReference\n3.7. Method Security\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#jc-method\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "In Spring Web, which of these is the one being described below?  Select\
      \ the one that applies best.\n\n     This can be used to have the request body\
      \ read and deserialized into an Object through an HttpMessageConverter."
    correct:
      - "@RequestBody"
    other:
      - "@RequestMapping"
      - "@ResponseBody"
      - "@RequestMethod"
    explanation: "Explanation\nThe Spring Reference documentation says:\n\"\nUse the\
      \ @RequestBody annotation to have the request body read and deserialized into\
      \ an Object through an HttpMessageConverter.\n\"\nReference\n@RequestBody\n  *\
      \  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc-ann-requestbody"
  - question: "Spring has mock objects on these categories to assist in unit testing.\
      \  Select 2."
    correct:
      - "Environment"
      - "JNDI"
    other:
      - "JMX"
      - "RMI"
    explanation: "Explanation:\nSpring has mock objects on Environment, JNDI, and Servlet\
      \ API to assist in unit testing.\nReference\n2.1. Mock Objects\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/testing.html#mock-objects"
  - question: "Which of these is described below? Select the one that applies best.\n\
      \n     In Spring, by default, they cause a rollback. They are preferred in Spring,\
      \ because they do not force users to catch exceptions that they cannot even recover\
      \ from anyway."
    correct:
      - "unchecked exceptions"
    other:
      - "application exceptions"
      - "checked exceptions"
      - "subclasses of Exception"
    explanation: "Explanation:\nReference\n11.5.3. Rolling back a declarative transaction\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-rolling-back\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n@Transactional settings\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-attransactional-settings\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "For the blank below, why would putting 'mvcMatchers' be better than putting\
      \ 'antMatchers'?  Select all that apply.\n\n     A method as below exists\n\n\
      \          @RequestMapping(\"/customer\")\n          public String customer()\
      \ {\n\n     A security setting as below exists\n\n     protected configure(HttpSecurity\
      \ http) throws Exception {\n\thttp.authorizeRequests()\n\t\t\t___________.(\"\
      /customer\").hasRole(\"CUSTOMER\");\n     }"
    correct:
      - "If 'antMatchers' is used, depending on the Spring MVC configuration, '/customer.html'\
        \ may not be protected."
      - "If 'mvcMatchers' is used, the same URLs that Spring MVC matches on the\
        \ URL, will be protected."
      - "If 'antMatchers' is used, only '/customer' is protected."
      - "If 'antMatchers' is used, depending on the Spring MVC configuration, '/customer/'\
        \ may not be protected."
    other: [ ]
    explanation: "Explanation\nThe Spring Security reference documentation says: \n\"\
      \nConsider a controller that is mapped as follows:\n@RequestMapping(\"/admin\"\
      )\npublic String admin() {\nIf we wanted to restrict access to this controller\
      \ method to admin users, a developer can provide authorization rules by matching\
      \ on the HttpServletRequest with the following:\nprotected configure(HttpSecurity\
      \ http) throws Exception {\n\thttp\n\t\t.authorizeRequests()\n\t\t\t.antMatchers(\"\
      /admin\").hasRole(\"ADMIN\");\n}\nor in XML\n<http>\n\t<intercept-url pattern=\"\
      /admin\" access=\"hasRole('ADMIN')\"></intercept>\n</http>\nWith either configuration,\
      \ the URL /admin will require the authenticated user to be an admin user. However,\
      \ depending on our Spring MVC configuration, the URL /admin.html will also map\
      \ to our admin() method. Additionally, depending on our Spring MVC configuration,\
      \ the URL /admin/ will also map to our admin() method.\nThe problem is that our\
      \ security rule is only protecting /admin. We could add additional rules for all\
      \ the permutations of Spring MVC, but this would be quite verbose and tedious.\n\
      Instead, we can leverage Spring Securitys MvcRequestMatcher. The following configuration\
      \ will protect the same URLs that Spring MVC will match on by using Spring MVC\
      \ to match on the URL.\nprotected configure(HttpSecurity http) throws Exception\
      \ {\n\thttp\n\t\t.authorizeRequests()\n\t\t\t.mvcMatchers(\"/admin\").hasRole(\"\
      ADMIN\");\n}\nor in XML\n<http request-matcher=\"mvc\">\n\t<intercept-url pattern=\"\
      /admin\" access=\"hasRole('ADMIN')\"></intercept>\n</http>\n\"\nReference\n39.2\
      \ MvcRequestMatcher\n  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#mvc-requestmatcher"
  - question: "Which of these is true about scopes?"
    correct:
      - "The 'request' scope is valid only in a web-aware Spring ApplicationContext.\
        \  Each HTTP request will have up to 1 object instance of the concerned bean\
        \ in this scope."
    other:
      - "If a bean is in 'session' scope, there will be only 1 object instance of\
        \ this bean in the Spring IoC container."
      - "When the 'singleInstance' attribute is set to 'false', singleton scoped\
        \ beans can have more than one object instance per container."
      - "None of the above."
    explanation: "Explanation:\nSingleton scoped beans can always have up to 1 object\
      \ instance per container only.  There is no such thing as 'singleInstance' attribute.\n\
      If a bean is in 'session' scope, there will be only 1 object instance of this\
      \ bean on each HTTP Session in a web-aware context.\nReference\n1.5. Bean scopes\n\
      \  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factory-scopes"
  - question: "Which of these is true regarding the code below?\n\n     @Configuration\n\
      \     @Profile(\"test\")\n     public class MyConfig {\n          @Bean\n    \
      \      public DataSource dataSource() {"
    correct:
      - "The DataSource returned by dataSource() will be registered into the container,\
        \ if the current profile is set to \"test\"."
    other:
      - "It is invalid.  It should be @ProfileValue instead of @Profile."
      - "@Profile is a performance monitoring annotation.  The code enables the\
        \ Spring container to collect performance statistics for all classes inside\
        \ the 'test' package."
      - "The code is invalid.  @ContextConfiguration should be used instead of @Configuration\
        \ because @Profile is used in JUnit tests only, and not in normal JavaConfig\
        \ configuration."
    explanation: "Explanation:\n@Profile can be used in a class annotated with @Configuration.\n\
      There is no @ProfileValue annotation supported in Spring.\nThe sample code below\
      \ is valid.\n     @Configuration\n     @Profile(\"test\")\n     public class MyConfig\
      \ {\n          @Bean\n          public DataSource dataSource() {\nReference\n\
      Conditionally including @Configuration classes or @Beans\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-java-conditional\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nContext configuration\
      \ with environment profiles\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/testing.html#testcontext-ctx-management-env-profiles\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are valid controller methods?  Select all that apply."
    correct:
      - "@RequestMapping(value = \"/getMyData\")\npublic HttpHeaders getMyData()\
        \ {"
      - "@RequestMapping(value = \"/getMyData\")\npublic @ResponseBody\n     MyDataDto\
        \ getMyData(HttpSession httpSession) {"
      - "@RequestMapping(value = \"/getMyData\")\npublic Map getMyData() {"
    other:
      - "@RequestMapping(value = \"/getMyData\")\npublic @RequestBody \n     MyDataDto\
        \ getMyData() {"
    explanation: "Explanation:\nSome of the valid method return types include HttpHeaders\
      \ and Map.\nThe Spring Reference says:\n     \"An HttpHeaders object to return\
      \ a response with no body.\"\n@RequestBody is annotated on parameters only  (not\
      \ on methods).\nThe Spring Reference says:\n     \"If the method is annotated\
      \ with @ResponseBody, the return type is written to the response HTTP body. The\
      \ return value will be converted to the declared method argument type using HttpMessageConverters.\"\
      \nWhen an HttpSession is included as a method parameter, Spring will populate\
      \ it with the current HttpSession object.  The Spring Reference says:\n     \"\
      Session object (Servlet API): of type HttpSession. An argument of this type enforces\
      \ the presence of a corresponding session. As a consequence, such an argument\
      \ is never null.\"\nReference\nSupported method argument types\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nSupported method\
      \ return types\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which one is the lowest database system isolation level?"
    correct:
      - "Read uncommitted"
    other:
      - "Read committed"
      - "Serializable"
      - "Repeatable reads"
    explanation: "Explanation\nIn the 'Read uncommitted' isolation level, dirty reads,\
      \ non-repeatable reads and phantom reads can occur.\nReference\nEnum Isolation\n\
      \  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/transaction/annotation/Isolation.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nIsolation (database systems)\n  *  http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels\n\
      \  *  Wikipedia"
  - question: "Which of these is valid, based on the code below?\n\n     package abc.aop;\n\
      \     .....\n     @Aspect\n     public class MyPointcuts {\n          @Pointcut(\"\
      within(abc.web..*)\")\n          public void pointcut1() {}\n    \n          @Pointcut(\"\
      execution(* abc.dao.*.*(..))\")\n          public void pointcut2() {}\n     }"
    correct:
      - "All of the above."
    other:
      - "@Pointcut(\"pointcut2()\")\nprivate void myOperation() {}"
      - "@Pointcut(\"pointcut1() && pointcut2()\")\nprivate void myOperation() {}"
      - "@Pointcut(\"pointcut1()\")\nprivate void myOperation() {}"
    explanation: "Explanation:\nReference\nSharing common pointcut definitions\n  *\
      \  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-common-pointcuts\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which ones are true about the @Qualifier annotation?  Select all that\
      \ apply."
    correct:
      - "The @Qualifier annotation can be used on individual constructor arguments."
      - "The @Qualifier annotation can also be used on types and fields."
    other:
      - "The @Qualifier annotation cannot be used on method parameters."
      - "The @Qualifier annotation by default, is required to be present when the\
        \ Autowired annotation is used."
    explanation: "Explanation\nReference\n4.9.3. Fine-tuning annotation-based autowiring\
      \ with qualifiers\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-autowired-annotation-qualifiers\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about @ContextConfiguration?  Select all that\
      \ apply."
    correct:
      - "@ContextConfiguration can accept XML configuration files."
      - "Below is a valid usage of @ContextConfiguration.\n\n     @ContextConfiguration(classes\
        \ = MyTestConfig.class)\n     public class MyConfigClassApplicationContextTests\
        \ {\n         // class body...\n     }"
    other:
      - "@ContextConfiguration can be annotated on method or class-level."
      - "@ContextConfiguration is commonly used in unit tests, more than in integration\
        \ tests."
    explanation: "Explanation:\n@ContextConfiguration is commonly used in integration\
      \ tests.\n@ContextConfiguration can accept XML configuration files.\nBelow is\
      \ a valid usage of @ContextConfiguration.\n     @ContextConfiguration(classes\
      \ = MyTestConfig.class)\n     public class MyConfigClassApplicationContextTests\
      \ {\n         // class body...\n     }\n@ContextConfiguration can be annotated\
      \ on class-level only.\nReference\n@ContextConfiguration\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/testing.html#contextconfiguration"
  - question: "Fill in the blanks.  __________ makes accessing databases easier, by\
      \ converting between objects and relational database data.  __________  is a Java\
      \ API that describes the management of relational data in applications.  Select\
      \ the one that applies best."
    correct:
      - "ORM, JPA"
    other:
      - "JPA, OXM"
      - "XML, JDBC"
      - "ORM, OXM"
    explanation: "Explanation\nReference\n14.1. Introduction to ORM with Spring\n  *\
      \  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/orm.html#orm-introduction\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n14.5. JPA\n  * \
      \ http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/orm.html#orm-jpa\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nContextConfiguration\n\
      \  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/javadoc-api/org/springframework/test/context/ContextConfiguration.html#classes--"
  - question: "Which of these are true about declaring MVC controllers without using\
      \ annotations?  Select all that apply."
    correct:
      - "BeanNameUrlHandlerMapping is included in the Spring framework, and it is\
        \ the default if no HandlerMapping bean is registered in the application context."
      - "Create a controller class by implementing the Controller interface or extending\
        \ any of Controller's implementations like AbstractController."
      - "A HandlerMapping implementation that does not use annotations can be used,\
        \ to map the requests to the handler objects."
    other:
      - "@Controller should be used.  The ways of declaring controllers without\
        \ annotation are deprecated and will be removed in the next major Spring version\
        \ like Spring 6."
    explanation: "Explanation:\nBelow is an example of a controller.\n     public class\
      \ MyController extends AbstractController{\n          @Override\n          protected\
      \ ModelAndView handleRequestInternal(HttpServletRequest request,\n           \
      \         HttpServletResponse response) throws Exception {\n               ModelAndView\
      \ model = new ModelAndView(\"MyPage\");\n               model.addObject(\"myReply\"\
      , \"hi there\");\t\t\n               return model;\n          }\n     }\nA HandlerMapping\
      \ implementation that does not use annotations, like BeanNameUrlHandlerMapping,\
      \ can be used to map the requests to the handler objects.\nThe ways of declaring\
      \ controllers without annotation are not deprecated and there is no mention anywhere\
      \ that they will be removed in the next major Spring version.\nReference:\nInterface\
      \ Controller\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/web/servlet/mvc/Controller.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nInterface HandlerMapping\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/web/servlet/HandlerMapping.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "Which of these can be used in Java-based or annotation-based Spring configuration?\
      \  Select all that apply."
    correct:
      - "@Configuration"
      - "@Scope"
      - "@Bean"
    other:
      - "@Config"
    explanation: "Explanation:\nThere is no @Config for this purpose.\nReference\n4.10.1.\
      \ @Component and further stereotype annotations\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-stereotype-annotations\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n4.10.7. Providing\
      \ a scope for autodetected components\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-scanning-scope-resolver\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n4.12.1. Basic concepts:\
      \ @Bean and @Configuration\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-java-basic-concepts\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "This AOP advice can choose not to proceed to the join point and return\
      \ its own return value."
    correct:
      - "Around advice"
    other:
      - "After returning advice"
      - "After throwing advice"
      - "Before advice"
    explanation: "Explanation:\n Reference\n8.3.3. Declaring advice\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-schema-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true about Spring MVC?  Select all that apply."
    correct:
      - "It provides additional Spring scopes for the following:  HTTP request,\
        \ and HTTP Session."
      - "In Spring MVC, any object can be a command or form-backing object.  It\
        \ is not needed to implement a framework-specific interface or base class."
      - "It has a JSP tag library that enables data binding and themes."
    other:
      - "To use Spring MVC, there is no additional jar needed.  It is included in\
        \ the spring core jar."
    explanation: "Explanation\nTo use Spring MVC, the Spring Web MVC jar is needed.\n\
      Reference\n16.1. Introduction to Spring Web MVC framework\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-introduction\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is an XML tag in Spring Security that allows access to\
      \ the current Authentication object stored in the security context?"
    correct:
      - "authentication"
    other:
      - "authorize"
      - "accesscontrollist"
      - "authenticate"
    explanation: "Explanation:\nThe 'accesscontrollist' tag is only valid when used\
      \ with Spring Security's ACL module.\nThere is no 'authenticate' XML tag for this\
      \ purpose.\nThe 'authentication' tag allows access to the current Authentication\
      \ object stored in the security context. \nThe 'authorize' tag is used to determine\
      \ whether its contents should be evaluated or not.\nReference\n32.2 The authorize\
      \ Tag\n  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#taglibs-authorize\n\
      32.3 The authentication Tag\n  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#the-authentication-tag\n\
      32.4 The accesscontrollist Tag\n  *  https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#the-accesscontrollist-tag"
  - question: "Which of these annotations, determine if a bean is registered or not,\
      \ based on this annotation's value?  Select all that apply."
    correct:
      - "@Profile"
    other:
      - "@BeansProfile"
      - "@BeanProfile"
      - "@Config"
    explanation: "Explanation:\nThere are no @BeansProfile, @BeanProfile, nor @Config,\
      \ used in this purpose.\nBelow is an example.\n     @Configuration\n     @Profile(\"\
      test\")\n     public class MyConfigForTesting {\n          @Bean\n          public\
      \ PaymentService paymentService() {\n               return new DummyPaymentService();\n\
      \          }\n     }\n     @Configuration\n     @Profile(\"production\")\n   \
      \  public class MyConfigForProduction {\n          @Bean\n          public PaymentService\
      \ paymentService() {\n               return new RealThirdPartyPaymentService();\n\
      \          }\n     }\nReference\nContext configuration with environment profiles\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/testing.html#testcontext-ctx-management-env-profiles\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In which of these database system isolation levels can phantom reads\
      \ occur?  Select all that apply?"
    correct:
      - "Read committed"
      - "Repeatable reads"
      - "Read uncommitted"
    other:
      - "Serializable"
    explanation: "Explanation:\nHere is a brief summary of the characteristics of the\
      \ isolation levels.\n     Read uncommitted\n          dirty read can occur:  Yes\n\
      \          non-repeatable read can occur:  Yes\n          phantom read can occur:\
      \  Yes\n     Read committed\n          dirty read can occur:  No\n          non-repeatable\
      \ read can occur:  Yes\n          phantom read can occur:  Yes\n     Repeatable\
      \ reads\n          dirty read can occur:  No\n          non-repeatable read can\
      \ occur:  No\n          phantom read can occur:  Yes\n     Serializable\n    \
      \      dirty read can occur:  No\n          non-repeatable read can occur:  No\n\
      \          phantom read can occur:  No\nReference\nEnum Isolation\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/transaction/annotation/Isolation.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nIsolation (database systems)\n  *  http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels\n\
      \  *  Wikipedia"
  - question: "What does this code below return?\n\nreturn this.jdbcTemplate.queryForObject(\"\
      select name from Account where name like ?\",\n     , new Object[]{\"JOHN%\"}\n\
      \     , new RowMapper<Account>() {\n            public Account mapRow(ResultSet\
      \ rs, int rowNum) throws SQLException {\n                  return new Account(rs.getString(\"\
      name\"));    \n            }  \n       }  \n);"
    correct:
      - "It returns an Account object."
    other:
      - "It returns a List<Account> object."
      - "It returns a Account[] object."
      - "It returns a RowMapper<Account> object."
    explanation: "Explanation: \nExamples of JdbcTemplate class usage\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/jdbc.html#jdbc-JdbcTemplate-examples\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true regarding Spring transactions?  Select all that\
      \ apply."
    correct:
      - "You can call setRollbackOnly() on the TransactionStatus object to roll\
        \ back the current transaction."
      - "Spring Framework's declarative transaction support is enabled via AOP proxies."
    other:
      - "Checked exceptions, by default, in Spring declarative transactions, causes\
        \ a roll back."
      - "javax.transaction.Transactional annotation cannot be used in the annotation-based\
        \ approach in Spring transactions.  org.springframework.transaction.annotation.Transactional\
        \ annotation must be used instead."
    explanation: "Explanation:\nChecked exceptions, by default, in Spring declarative\
      \ transactions, does not cause a roll back.\nThe standard javax.transaction.Transactional\
      \ annotation is also supported as a drop-in replacement to Spring's own annotation.\n\
      Reference\n11.3. Understanding the Spring Framework transaction abstraction\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-strategies\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.5. Declarative\
      \ transaction management\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.5.2. Example\
      \ of declarative transaction implementation\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-first-example\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is a method used in customizing bean lifecycles, and is\
      \ found inside the InitializingBean interface?"
    correct:
      - "afterPropertiesSet()"
    other:
      - "init()"
      - "postConstruct()"
      - "onInit()"
    explanation: "Explanation:\nReference\n4.6.1. Lifecycle callbacks\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-lifecycle\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is an object created by the Spring AOP framework  (using\
      \ CGLIB or JDK) in order to implement the aspect contracts   (e.g. advise method\
      \ executions)?"
    correct:
      - "AOP proxy"
    other:
      - "BeanFactory"
      - "BeanPostProcessor"
      - "Introduction"
    explanation: "Explanation:\nReference\n8.1.1. AOP concepts\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring MVC, which of these are a valid use of the @PathVariable? \
      \ Select all that apply."
    correct:
      - "@RequestMapping(value=\"/users/{userId}/addresses/{addressId}\")\npublic\
        \ String viewUserAddress(@PathVariable String userId, @PathVariable String addressId,\
        \ Model m) {"
      - "@RequestMapping(value=\"/users/{userId}\")\npublic String viewUser(@PathVariable(\"\
        userId\") String personnelId, Model m) {"
      - "@RequestMapping(value=\"/users/{userId}\")\npublic String viewUser(@PathVariable\
        \ String userId, Model m) {"
    other:
      - "@RequestMapping(value=\"/users/{userId}\")\npublic String viewUser(@PathVariable(\"\
        users\") String user, Model m) {"
    explanation: "Explanation:\nBelow is a valid use of the @PathVariable  (notice the\
      \ use of the matching 'userId' string in the @RequestMapping and in the @PathVariable):\n\
      @RequestMapping(value=\"/users/{userId}\")\npublic String viewUser(@PathVariable(\"\
      userId\") String user, Model m) {\n Reference\nURI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about Spring Security's <intercept-url> element?"
    correct:
      - "All of the above."
    other:
      - "If there are multiple intercept-url elements used, the first match will\
        \ be used."
      - "Below is a valid usage.\n\n     <intercept-url pattern=\"/**\" access=\"\
        authenticated\"/>"
      - "Below is a valid usage.\n\n     <intercept-url pattern=\"/myPage.jsp*\"\
        \ access=\"ROLE_USER\"/>"
    explanation: "Explanation:\nThe Spring Security Reference says:\n     \"You can\
      \ use multiple <intercept-url> elements to define different access requirements\
      \ for different sets of URLs, but they will be evaluated in the order listed and\
      \ the first match will be used. So you must put the most specific matches at the\
      \ top. You can also add a method attribute to limit the match to a particular\
      \ HTTP method (GET, POST, PUT etc.).\"\nReference\n3.2. HttpSecurity\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#jc-httpsecurity\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      4.2.2. A Minimal Configuration\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-minimal\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Which of these are Spring Boot annotations?  Select all that apply."
    correct:
      - "@ConfigurationProperties"
      - "@JsonComponent"
    other:
      - "@SpringBootController"
      - "@SpringBootWebController"
    explanation: "Explanation:\nThere is no @SpringBootWebController nor @SpringBootController\
      \ in Spring Boot.\nThe Spring Boot reference documentation says:\n     \"Spring\
      \ Boot attempts to coerce the external application properties to the right type\
      \ when it binds to the @ConfigurationProperties beans. \"\nThe Spring Boot reference\
      \ documentation says:\n     \"If you use Jackson to serialize and deserialize\
      \ JSON data, you might want to write your own JsonSerializer and JsonDeserializer\
      \ classes. Custom serializers are usually registered with Jackson through a module,\
      \ but Spring Boot provides an alternative @JsonComponent annotation that makes\
      \ it easier to directly register Spring Beans.\"\n Reference\n24.7.3 Properties\
      \ Conversion\n  *  https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config-conversion\n\
      27.1.3 Custom JSON Serializers and Deserializers\n  *  https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-json-components"
  - question: "Which of these is true regarding Spring Boot's build outputs?"
    correct:
      - "All of the above."
    other:
      - "The build output file of Spring Boot can be a war."
      - "For web applications, a war is outputted from Spring Boot so that it can\
        \ be deployed on standalone servers."
      - "The build output file of Spring Boot can be a jar."
    explanation: ""
  - question: "Which of these dispatches requests to controllers?"
    correct:
      - "DispatcherServlet"
    other:
      - "ViewResolver"
      - "RequestDispatcher"
      - "FlashMapManager"
    explanation: "Explanation:\nThere is no RequestDispatcher used for this purpose\
      \ in Spring.\nReference\n16.2.1. Special Bean Types In the WebApplicationContext\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-servlet-special-bean-types\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are cross-cutting concerns where Spring AOP will be useful?\
      \  Select all that apply."
    correct:
      - "Caching"
      - "Transaction"
      - "Security"
    other:
      - "File utility  (e.g. helper methods on loading files)"
    explanation: "Explanation:\nThere are many other use cases where AOP is very useful.\
      \  It keeps unrelated codes out of the advised classes.\nOther scenarios include:\
      \  performance monitoring, measuring statistics, logging, etc.\nReference\n8.1.\
      \ Introduction\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is used by Spring Boot for all internal logging  (while\
      \ leaving the underlying log implementation open)?"
    correct:
      - "Commons Logging"
    other:
      - "Java Util Logging"
      - "Logback"
      - "Log4J2"
    explanation: "Explanation"
  - question: "Which of these are classes that can be put on Spring MVC controller method\
      \ parameters, and Spring will auto-populate these fields with the appropriate\
      \ instance?  Select all that apply."
    correct:
      - "HttpSession"
      - "ServletResponse"
      - "ServletRequest"
    other:
      - "Controller"
    explanation: "Explanation\nThe Spring Reference mentions these among those auto-populated:\n\
      \"\njavax.servlet.ServletRequest, javax.servlet.ServletResponse\n     Choose any\
      \ specific request or response type  (e.g. ServletRequest, HttpServletRequest,\
      \ or Spring's MultipartRequest, MultipartHttpServletRequest).\njavax.servlet.http.HttpSession\n\
      \     Enforces the presence of a session. As a consequence, such an argument is\
      \ never null.\n\"\nThere is no Controller class for this purpose.\nReference\n\
      Method Arguments\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc-ann-arguments"
  - question: "Which of these are true about Spring's proxy feature?  Select all that\
      \ apply."
    correct:
      - "There is a type of Spring proxy that can replace the object being returned\
        \ by the method."
      - "You can add methods or fields to an advised  (proxied) class."
      - "If a proxied method is called directly by another method from inside the\
        \ same class, the proxy of that proxied method will not be triggered."
      - "There is a type of Spring proxy that can be triggered only if the proxied\
        \ method throws an exception."
    other: [ ]
    explanation: "Explanation\nIf a proxied method is called directly by another method\
      \ from inside the same class, the proxy will not be triggered.\nFor example, if\
      \ a method is marked with @Transactional, and it is called from inside the same\
      \ class directly  (for example, the method is called with prefix \"this.\"), then\
      \ that marked method will not be treated with the @Transactional proxy.\nThis\
      \ is a Spring limitation.\nReference\n5.1.1. AOP concepts\n  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/spring-framework-reference/core.html#aop-introduction-defn"
  - question: "Which of these are true about the Autowired annotation?  Select all that\
      \ apply."
    correct:
      - "When the Autowired annotation is used on an array field or an array method\
        \ argument 'MyClass[]', all beans of type MyClass in the Spring context, will\
        \ be in the array injected."
      - "The Autowired annotation has a 'required' property to indicate if the value\
        \ being injected is optional."
    other:
      - "When the Autowired annotation is used on a method, the method can only\
        \ have up to 1 argument on the method signature."
      - "When the Autowired annotation is used on a method, the method name must\
        \ start with 'set'."
    explanation: "Explanation\nReference\n4.9.2. @Autowired\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-autowired-annotation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blanks.  In securing applications, before checking for ______,\
      \ the identity of the ______ should already been established by the ______ process.\
      \  \nSelect the one that applies best."
    correct:
      - "authorization, principal, authentication"
    other:
      - "authentication, system, authorization"
      - "authentication, server, login"
      - "authorization, security provider, login"
    explanation: "Explanation:\nThe Spring Security Reference says:\n     \"As you probably\
      \ know two major areas of application security are \"authentication\" and \"authorization\"\
      \ (or \"access-control\"). These are the two main areas that Spring Security targets.\
      \ \"Authentication\" is the process of establishing a principal is who they claim\
      \ to be (a \"principal\" generally means a user, device or some other system which\
      \ can perform an action in your application).\"Authorization\" refers to the process\
      \ of deciding whether a principal is allowed to perform an action within your\
      \ application. To arrive at the point where an authorization decision is needed,\
      \ the identity of the principal has already been established by the authentication\
      \ process. These concepts are common, and not at all specific to Spring Security.\"\
      \nReference\n1.1. What is Spring Security?\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#what-is-acegi-security\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Which of these can be used to create Spring AOP proxy objects?  Select\
      \ two."
    correct:
      - "JDK"
      - "CGLIB"
    other:
      - "AspectJ compiler"
      - "AspectJ weaver"
    explanation: "Explanation:\nReference\n8.2. @AspectJ support\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-ataspectj\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n9.5.3. JDK- and\
      \ CGLIB-based proxies\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop-api.html#aop-pfb-proxy-types\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Spring is commonly used, and has strong support (like mock object and\
      \ utilities), in these types of testing.  Select 2 that applies best."
    correct:
      - "unit"
      - "integration"
    other:
      - "system and user acceptance"
      - "volume"
    explanation: "Explanation:\nSpring is commonly used in these types of testing: \
      \ unit, integration.\nReference\n1. Introduction to Spring Testing\n  *  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/testing.html#testing-introduction"
  - question: "Which of these, by default, will cause a rollback of the Spring transaction?\
      \  Select all that apply."
    correct:
      - "java.lang.Error"
      - "java.lang.RuntimeException"
      - "unchecked exception"
    other:
      - "checked exception"
    explanation: "Explanation:\nThe Spring Reference says:\n     Checked exceptions\
      \ that are thrown from a transactional method do not result in rollback in the\
      \ default configuration.\nReference\n11.3. Understanding the Spring Framework\
      \ transaction abstraction\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-strategies\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.5. Declarative\
      \ transaction management\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n11.5.3. Rolling\
      \ back a declarative transaction\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-rolling-back\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these Spring Security annotations can use SpEL?  Select all\
      \ that apply."
    correct:
      - "@PostAuthorize"
      - "@PostFilter"
      - "@PreAuthorize"
      - "@PreFilter"
    other: [ ]
    explanation: "Explanation:\nBelow is an example.\n     @PreAuthorize(\"hasRole('ROLE_USER')\"\
      )\n     public void sendComment(Comment comment);\nReference\n3.3.1. @Pre and\
      \ @Post Annotations\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#el-pre-post-annotations\n\
      \  *  Authorization\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Which ones are valid Autowired definitions?  Select all that apply."
    correct:
      - "@Autowired(required=true)\npublic MySource(MyConnection myConnection) {\n\
        .\n."
      - "@Autowired\nprivate MyFile[] myFiles;\n.\n."
    other:
      - "@Autowired(required=false, searchBy=\"type\")\npublic void setMyInputs(Set<MyInput>\
        \ myInputs) {..."
      - "@Autowired\npublic void setMyInputs(Map<MyInput, String> myInputs) {\n\
        .\n."
    explanation: "Explanation:\nTyped Map collections can be autowired as long as the\
      \ expected key type is String.\nThere is no searchBy attribute.\nReference\n4.9.2.\
      \ @Autowired\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-autowired-annotation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these can be used by Spring Boot to externalize configuration?\
      \ Select all that apply."
    correct:
      - "properties files"
      - "environment variables"
      - "YAML files"
    other:
      - "XML files"
    explanation: ""
  - question: "Which of these is the one being described below?  Select the one that\
      \ applies best.\nIt makes invoking many RESTful services simpler while enforcing\
      \ REST best practices."
    correct:
      - "RestTemplate"
    other:
      - "HttpTemplate"
      - "RestMessageProducer"
      - "HttpMessageProducer"
    explanation: "Explanation:\nThere is no HttpTemplate, RestMessageProducer, or HttpMessageProducer\
      \ used in this purpose.\nThe Spring Reference says:\n     \"RestTemplate provides\
      \ higher level methods that correspond to each of the six main HTTP methods that\
      \ make invoking many RESTful services a one-liner and enforce REST best practices.\"\
      \nReference\n21.10.1. RestTemplate\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/remoting.html#rest-resttemplate\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "The use of this makes it easier to mock and/or test java classes.  Select\
      \ the one that applies best."
    correct:
      - "java interfaces"
    other:
      - "Spring Expression Language (SpEL)"
      - "template design pattern"
      - "Spring AOP"
    explanation: "Explanation:\nReference\n4.4.1. Dependency injection\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-collaborators\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are true about AOP proxies?  Select all that apply."
    correct:
      - "Spring AOP is proxy-based."
    other:
      - "In Spring AOP, if the target object implements an interface, it defaults\
        \ to using the standard JDK dynamic proxies, and can never be overridden to\
        \ force the use CGLIB instead."
      - "Spring AOP can use either CGLIB or JDK dynamic proxies on target objects\
        \ that does not implement any interface."
      - "Spring AOP proxies are woven in at compile time."
    explanation: "Explanation:\nSpring AOP can use CGLIB proxies on target objects that\
      \ does not implement any interface.  Spring AOP cannot use JDK dynamic proxies\
      \ on target objects that does not implement any interface.\nIn Spring AOP, if\
      \ the target object implements an interface, it defaults to using the standard\
      \ JDK dynamic proxies, and this behavior can be overridden to force the use CGLIB\
      \ instead.\nSpring AOP performs weaving at runtime.\nReference\n8.1.1. AOP concepts\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n8.1.3. AOP Proxies\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-proxies\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n8.6. Proxying mechanisms\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-proxying\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these statements are true regarding Spring's support for javax.sql.DataSource?\
      \  Select all that apply."
    correct:
      - "Spring obtains a connection to the database through a DataSource."
    other:
      - "Spring's SingleConnectionDataSource is multi-threading capable."
      - "Spring's DriverManagerDataSource performs well in a multiple-request production\
        \ environment."
      - "Spring's DriverManagerDataSource provides pooling."
    explanation: "Explanation:\nThe Spring Reference says:\n     \"The SingleConnectionDataSource\
      \ class is an implementation of the SmartDataSource interface that wraps a single\
      \ Connection that is not closed after each use. Obviously, this is not multi-threading\
      \ capable.\"\nThe Spring Reference says:\n     \"The DriverManagerDataSource class\
      \ is an implementation of the standard DataSource interface that configures a\
      \ plain JDBC driver through bean properties, and returns a new Connection every\
      \ time.\n     This implementation is useful for test and stand-alone environments\
      \ outside of a Java EE container, either as a DataSource bean in a Spring IoC\
      \ container, or in conjunction with a simple JNDI environment. Pool-assuming Connection.close()\
      \ calls will simply close the connection, so any DataSource-aware persistence\
      \ code should work.\"\n Reference\n13.3. Controlling database connections\n  *\
      \  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/jdbc.html#jdbc-connections\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about the partial code below?\n\n     @Repository\n\
      \     @Profile  ({\"dev\", \"!prod\"})\n     public class MyRepoImpl implements\
      \ MyRepo {\n     ..."
    correct:
      - "@Profile can be annotated on methods."
      - "The MyRepoImpl will be created as a Spring bean, when the \"uat\" profile\
        \ is active."
      - "The MyRepoImpl will be created as a Spring bean, when the \"dev\" profile\
        \ is active."
    other:
      - "It is an invalid usage of the @Profile annotation."
    explanation: "Explanation:\nThe page below says:\n     https://docs.spring.io/spring/docs/4.3.12.RELEASE/javadoc-api/org/springframework/context/annotation/Profile.html\n\
      \          \"The @Profile annotation may be used in any of the following ways:\n\
      \               as a type-level annotation on any class directly or indirectly\
      \ annotated with @Component, including @Configuration classes\n              \
      \ as a meta-annotation, for the purpose of composing custom stereotype annotations\n\
      \               as a method-level annotation on any @Bean method\"\n         \
      \ It also says:\n          \"If a given profile is prefixed with the NOT operator\
      \ (!), the annotated component will be registered if the profile is not active\
      \ ²¢±\x80±\x94 for example, given @Profile({\"p1\", \"!p2\"}), registration will\
      \ occur if profile 'p1' is active or if profile 'p2' is not active.\"\nReference\n\
      Profile\n  *  https://docs.spring.io/spring/docs/4.3.12.RELEASE/javadoc-api/org/springframework/context/annotation/Profile.html"
  - question: "Which of these is being described below?  Select the one that applies\
      \ best. \n\nIt is a Spring framework, designed to simplify the bootstrapping and\
      \ development of a new Spring application. \nThe framework takes an opinionated\
      \ approach to configuration, freeing developers from the need to define boilerplate\
      \ configuration."
    correct:
      - "Spring Boot"
    other:
      - "Spring IO"
      - "Spring Configuration"
      - "Spring Bootstrap"
    explanation: ""
  - question: "On which of these can you annotate the @Profile?  Select all that apply."
    correct:
      - "Class"
      - "Method"
    other:
      - "Method Parameter"
      - "Return Type"
    explanation: "Explanation:\nBelow is an example.\n     @Configuration\n     @Profile(\"\
      test\")\n     public class MyConfigForTesting {\n          @Bean\n          public\
      \ PaymentService paymentService() {\n               return new DummyPaymentService();\n\
      \          }\n     }\nBelow is an example.\n     @Configuration\n     public class\
      \ MyConfigForTesting {\n          @Bean\n          @Profile(\"test\")\n      \
      \    public PaymentService paymentService() {\n               return new DummyPaymentService();\n\
      \          }\n     }\nReference\nContext configuration with environment profiles\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/testing.html#testcontext-ctx-management-env-profiles\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Fill in the blanks.  Select the one that applies best.\n \n     RPC mechanisms\
      \ like SOAP Web Services are centered on ______.  ______ is a popular alternative,\
      \ and is centered on ______."
    correct:
      - "actions and processes, REST, information and resources"
    other:
      - "information and resources, JMS, actions and processes"
      - "information and resources, REST, actions and processes"
      - "actions and processes, JMS, information and resources"
    explanation: "Explanation:\nReference:\nRepresentational state transfer\n  *  http://en.wikipedia.org/wiki/Representational_state_transfer\n\
      \  *  Wikipedia"
  - question: "Fill in the 2 blanks.  Select the one that applies best.\n\n     ______(value=HttpStatus.NOT_FOUND,\
      \ reason=\"Not Found\")\n     public class MyException extends RuntimeException\
      \ {}\n\n     Taking into consideration the code above, when a MyException is thrown,\
      \ ______ is the HTTP code returned to the client."
    correct:
      - "@ResponseStatus, 404"
    other:
      - "@HttpResponseStatus, 404"
      - "@HttpResponseStatus, 500"
      - "@ResponseStatus, 500"
    explanation: "Explanation:\nThere is no @HttpResponseStatus for this purpose.\n\
      \ Reference\n16.12.4. Annotating Business Exceptions With @ResponseStatus\n  *\
      \  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-annotated-exceptions\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nEnum HttpStatus\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/javadoc-api/org/springframework/http/HttpStatus.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API"
  - question: "Which of these are considered idempotent REST operations?  Select all\
      \ that apply."
    correct:
      - "GET"
      - "PUT"
      - "DELETE"
    other:
      - "POST"
    explanation: "Explanation:\nIdempotent REST operations are those that will produce\
      \ the same result no matter how many times they are repeated.\nReference\nRepresentational\
      \ state transfer\n  *  http://en.wikipedia.org/wiki/Representational_state_transfer\n\
      \  *  Wikipedia"
  - question: "Which of these is the one being described below?  Select the one that\
      \ applies best.\n\n     In Spring's web support, this annotation indicates that\
      \ a method parameter is bound to a URI template variable."
    correct:
      - "@PathVariable"
    other:
      - "@RequestMapping"
      - "@RequestMethod"
      - "@RequestBody"
    explanation: "Explanation:\nReference\nURI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these advices, when used, will have a chance to execute some\
      \ code after the join point execution throws an exception?  Select all that apply."
    correct:
      - "@AfterThrowing"
      - "@Around"
      - "@After"
    other:
      - "@AfterReturning"
    explanation: "Explanation:\n@AfterReturning advices are executed only if the target\
      \ method completes normally  (without exception thrown).\nIf you only need to\
      \ add some actions if an exception is thrown, the simplest one to use is the:\
      \  @AfterThrowing.\nReference\n8.2.4. Declaring advice\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these statements are true regarding the DataAccessException\
      \ exception class hierarchy?  Select all that apply."
    correct:
      - "Its use allows one to switch between persistence technologies fairly easily\
        \ and it also allows one to code without worrying about catching exceptions\
        \ that are specific to each technology."
      - "Its use helps convert proprietary checked exceptions, to a set of runtime\
        \ exceptions."
      - "DataAccessException instances thrown, wrap the original exception."
    other:
      - "The DataAccessException class is in the java.lang package."
    explanation: "Explanation:\nDataAccessException is supplied by Spring, not java.\n\
      Reference\n12.2. Consistent exception hierarchy\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/dao.html#dao-exceptions\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring MVC, which of these are true regarding the @RequestParam annotation?\
      \  Select all that apply."
    correct:
      - "The @RequestParam annotation binds request parameters to handler method\
        \ parameters."
      - "Given that 'enter' is annotated with @RequestMapping, below is valid:\n\
        \npublic String enter(@RequestParam(\"carId\") int carId, ModelMap m) {"
    other:
      - "The 'mandatory' attribute can be specified inside the @RequestParam, to\
        \ specify if a parameter is required or not."
      - "Parameters using this annotation are not required by default."
    explanation: "Explanation:\nThe 'required' attribute can be specified inside the\
      \ @RequestParam, to specify if a parameter is required or not.\nParameters using\
      \ this annotation are required by default.\n Reference\nBinding request parameters\
      \ to method parameters with @RequestParam\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestparam\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these can be used in Java-based or annotation-based Spring configuration?\
      \  Select all that apply."
    correct:
      - "@Import"
      - "@Autowired"
      - "@Required"
      - "@PreDestroy"
    other: [ ]
    explanation: "Explanation:\nBelow is an example.\n     @Configuration\n     public\
      \ class MyJavaConfig1 {\n          @Bean\n          public MyService myService()\
      \ {\n               return new MyService();\n          }\n     }\n     @Configuration\n\
      \     @Import(MyJavaConfig1.class)\n     public class MyJavaConfig2 {\n      \
      \    @Bean\n          public AnotherService anotherService() {\n             \
      \  return new AnotherService();\n          }\n     }\nReference\n4.9.1. @Required\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-required-annotation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n4.9.2. @Autowired\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-autowired-annotation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n4.9.7. @PostConstruct\
      \ and @PreDestroy\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-postconstruct-and-predestroy-annotations\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n4.12.1. Basic concepts:\
      \ @Bean and @Configuration\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-java-basic-concepts\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\nUsing the @Import\
      \ annotation\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-java-using-import\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is described below?  Select the one that applies best.\n\
      \nExample settings of it includes the following:  required, requires new, etc."
    correct:
      - "transaction propagation"
    other:
      - "transaction manager"
      - "isolation level"
      - "transaction proxy"
    explanation: "Explanation:\nReference\n11.5.7. Transaction propagation\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/transaction.html#tx-propagation\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these can be used in loading a root application context in a\
      \ web application?  Select all that apply."
    correct:
      - "ContextLoaderListener"
    other:
      - "DispatcherServlet"
      - "WebApplicationContext"
      - "BeanFactoryPostProcessor"
    explanation: "Explanation:\nThe BeanFactoryPostProcessor is used in customizing\
      \ Spring configuration metadata.\nWebApplicationContext is an ApplicationContext.\n\
      DispatcherServlet creates an application context, but it is not the root application\
      \ context.\nBelow is an example.\n     <web-app>\n          .....\n          <listener>\n\
      \               <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\
      \          </listener>\nReference\n4.8.2. Customizing configuration metadata with\
      \ a BeanFactoryPostProcessor\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-extension-factory-postprocessors\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n16.2. The DispatcherServlet\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-servlet\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n18.2. Common configuration\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/web-integration.html#web-integration-common\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which statements are true regarding AOP advices?  Select all that apply."
    correct:
      - "The first parameter of the @Around advice method must be of type ProceedingJoinPoint."
      - "Using @AfterThrowing with its property 'throwing', further filters the\
            \ pointcut matching into those methods that throw the exception type associated\
            \ with the 'throwing' property."
    other:
      - "The proceed() on the ProceedingJoinPoint, in an @Around advice method,\
        \ must be called up to 1 time only."
      - "@AfterFinally advise is executed whether the advised method exits normally\
        \ or not  (throws exception)."
    explanation: "The Aspect-Oriented Programming  /  What is a ProceedingJoinPoint?\
      \ When is it used?\nExplanation:\nThe proceed() on the ProceedingJoinPoint, in\
      \ an @Around advice method, may be invoked 0 or more times.\nThere is no @AfterFinally\
      \ annotation.  @After advise is executed whether the advised method exits normally\
      \  (no exception) or not  (have exception).\nReference\n8.2.4. Declaring advice\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "In Spring MVC, which of these is being described below?  Select the one\
      \ that applies best.\n\n     It is usually prepared inside controller methods,\
      \ and it carries information that the view needs to create the view output."
    correct:
      - "model"
    other:
      - "locale"
      - "theme"
      - "request parameters"
    explanation: "Explanation:\nReference\n16.1. Introduction to Spring Web MVC framework\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-introduction\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is the order of the database system isolation levels,\
      \ from lowest to the highest?"
    correct:
      - "Read uncommitted, Read committed, Repeatable reads, Serializable"
    other:
      - "Read committed, Repeatable reads, Serializable, Read uncommitted"
      - "Read uncommitted, Repeatable reads, Serializable, Read committed"
      - "Repeatable reads, Read uncommitted, Read committed, Serializable"
    explanation: "Explanation:\nHere is a brief summary of the characteristics of the\
      \ isolation levels.\n     Read uncommitted\n          dirty read can occur:  Yes\n\
      \          non-repeatable read can occur:  Yes\n          phantom read can occur:\
      \  Yes\n     Read committed\n          dirty read can occur:  No\n          non-repeatable\
      \ read can occur:  Yes\n          phantom read can occur:  Yes\n     Repeatable\
      \ reads\n          dirty read can occur:  No\n          non-repeatable read can\
      \ occur:  No\n          phantom read can occur:  Yes\n     Serializable\n    \
      \      dirty read can occur:  No\n          non-repeatable read can occur:  No\n\
      \          phantom read can occur:  No\nReference\nEnum Isolation\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/transaction/annotation/Isolation.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nIsolation (database systems)\n  *  http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels\n\
      \  *  Wikipedia"
  - question: "In Spring security, which of these is the attribute of the 'intercept-url'\
      \ element which is used in combination with the 'pattern' attribute to match an\
      \ incoming request?  Examples of its values are 'DELETE', and 'POST'."
    correct:
      - "method"
    other:
      - "filters"
      - "requires-channel"
      - "access"
    explanation: "Explanation:\nBelow is an example.\n     <intercept-url pattern=\"\
      /**\" access=\"authenticated\" method=\"POST\" requires-channel=\"https\"></intercept>\n\
      Reference\n2.1.18. \n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#nsa-intercept-url\n\
      \  *  Appendix\n  *  Spring Security Reference, Version 3.2.5.RELEASE"
  - question: "Which of these is the one described below?  Select the one that applies\
      \ best.\n\n     It handles the translation of view names and JSP pages."
    correct:
      - "InternalResourceViewResolver"
    other:
      - "BeanNameViewResolver"
      - "JSPBasedViewResolver"
      - "UrlBasedViewResolver"
    explanation: "Explanation:\nReference\n16.5.1. Resolving views with the ViewResolver\
      \ interface\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-viewresolver-resolver\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "It is described as a stage during the execution of a program, such as\
      \ the execution of a method or the\nhandling of an exception. In Spring AOP, it\
      \ always represents a method execution.  Select the one that applies best."
    correct:
      - "Join point"
    other:
      - "Advice"
      - "Aspect"
      - "Pointcut"
    explanation: "Explanation:\nReference\n8.1.1. AOP concepts\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-defn\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these are HTTP methods which are supported by RestTemplate?\
      \  Select all that apply."
    correct:
      - "HEAD"
      - "OPTIONS"
      - "PUT"
      - "DELETE"
    other: [ ]
    explanation: "Explanation:\nReference\n21.10.1. RestTemplate\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/remoting.html#rest-resttemplate\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is being described below?\nIt operates on the bean configuration\
      \ metadata; that is, the Spring IoC container allows it to read the configuration\
      \ metadata and\n potentially change it before the container instantiates any beans\
      \ other than its kind."
    correct:
      - "BeanFactoryPostProcessor"
    other:
      - "BeanPreProcessor"
      - "BeanPostProcessor"
      - "PropertyPlaceholderConfigurer"
    explanation: "Explanation:\nThere is no BeanPreProcessor in Spring.\nReference\n\
      1.8.2. Customizing configuration metadata with a BeanFactoryPostProcessor\n  *\
      \  https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factory-extension-factory-postprocessors"
  - question: "Which of these are true about @Query in Spring Data?  Select all that\
      \ apply."
    correct:
      - "The execution of pagination or dynamic sorting for native queries is not\
        \ supported."
    other:
      - "Queries defined using @NamedQuery will take precedence over queries annotated\
        \ to the query method using @Query."
      - "The @Query annotation allows to execute native queries by setting the 'native'\
        \ flag to true."
      - "Named queries declared in orm.xml will take precedence over queries annotated\
        \ to the query method using @Query."
    explanation: "Explanation:\nThe Spring Data reference says:\n     \"Queries annotated\
      \ to the query method will take precedence over queries defined using @NamedQuery\
      \ or named queries declared in orm.xml.\nThe @Query annotation allows to execute\
      \ native queries by setting the 'nativeQuery' flag to true. Note, that we currently\
      \ don't support execution of pagination or dynamic sorting for native queries\
      \ as we'd have to manipulate the actual query declared and we cannot do this reliably\
      \ for native SQL.\"\nReference\n2.2.4 Using @Query\n  *  https://docs.spring.io/spring-data/jpa/docs/1.3.0.RELEASE/reference/htmlsingle/#jpa.query-methods.at-query"
  - question: "In Spring MVC, which of these can be the return type of a method annotated\
      \ with @RequestMapping?  Select all that apply."
    correct:
      - "ModelAndView"
      - "Model"
      - "String"
      - "void"
    other: [ ]
    explanation: "Explanation:\nReference\nURI Template Patterns\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these design patterns is Spring's JdbcTemplate based on?"
    correct:
      - "template"
    other:
      - "strategy"
      - "command"
      - "state"
    explanation: "Explanation:\nReference\nTemplate method pattern\n  *  http://en.wikipedia.org/wiki/Template_method_pattern\n\
      \  *  Wikipedia\nDesign Patterns\n  *  http://en.wikipedia.org/wiki/Design_Patterns\n\
      \  *  Wikipedia"
  - question: "Which of these can be used when Spring Data repositories are implemented\
      \ at runtime?"
    correct:
      - "JDK proxy"
    other:
      - "All of the above."
      - "Byte-code generation"
      - "CGLIB"
    explanation: ""
  - question: "Which of these are true regarding Spring Security?  Select all that apply."
    correct:
      - "@RolesAllowed can be used to implement method-level security."
      - "The 'authorize' tag can be used in a JSP."
    other:
      - "Spring Security can work with encoded passwords using the '<encode-password>'\
        \ element."
      - "Spring Security user details cannot be stored in LDAP."
    explanation: "Explanation:\n'<password-encoder>' is used for supporting encoded\
      \ passwords.\nReference\n3. Java Configuration\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#jc\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      4.4.1. The Element\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-global-method\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      4.2. Getting Started with Security Namespace Configuration\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-getting-started\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      Adding a Password Encoder\n  *  http://docs.spring.io/spring-security/site/docs/3.2.5.RELEASE/reference/htmlsingle/#ns-password-encoder\n\
      \  *  Main Part Of The Reference\n  *  Spring Security Reference, Version 3.2.5.RELEASE\n\
      Annotation Type RolesAllowed\n  *  http://docs.oracle.com/javaee/6/api/javax/annotation/security/RolesAllowed.html\n\
      \  *  Java Platform, Enterprise Edition 6 API Specification"
  - question: "Which of these is true about @Bean methods that are marked with a java\
      \ 'static' modifier?  Select all that apply."
    correct:
      - "It avoids triggering other parts of the configuration at that point of\
        \ definition."
      - "It is necessary when beans will get initialized early in the container\
        \ lifecycle."
      - "The 'static' modifier allows a method to be called without creating its\
        \ containing configuration class as an instance."
      - "They will never get intercepted by the container, not even within @Configuration\
        \ classes."
    other: [ ]
    explanation: "Explanation:\nAll of them are true.\nReference\n1.10.5. Defining bean\
      \ metadata within components\n  *  https://docs.spring.io/spring-framework/docs/5.0.5.RELEASE/spring-framework-reference/core.html#beans-factorybeans-annotations"
  - question: "Which one is true about scopes?"
    correct:
      - "Configured destruction lifecycle callbacks on prototypes are not called."
    other:
      - "All of the above."
      - "By default, a 'singleton' is initialized only when a client requests it,\
        \ and stored in a cache for all subsequent requests to use."
      - "Ideally, use the prototype scope for all stateless beans and the singleton\
        \ scope for stateful beans."
    explanation: "Explanation:\nBy default, a 'singleton' is initialized even before\
      \ any client requests it.\nIdeally, use the prototype scope for all stateful beans\
      \ and the singleton scope for stateless beans.\nReference\n4.5. Bean scopes\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-scopes\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true about @Entity?"
    correct:
      - "@Entity is part of JPA."
    other:
      - "@Entity can be annotated on methods and classes."
      - "All of the above."
      - "When annotated on a method, @Entity makes the return value of the method\
        \ be persisted into the database."
    explanation: "Explanation:\n@Entity can be annotated on classes only.\nReference\n\
      Annotation Type Entity\n  *  http://docs.oracle.com/javaee/6/api/javax/persistence/Entity.html\n\
      \  *  Java Platform, Enterprise Edition 6 API Specification"
  - question: "Which of these is the one being described below?  Select the one that\
      \ applies best.\n\n     It is a PlatformTransactionManager implementation for\
      \ single JDBC datasources."
    correct:
      - "DataSourceTransactionManager"
    other:
      - "JDBCPlatformTransactionManager"
      - "JDBCDataSourceTransactionManager"
      - "JDBCTransactionManager"
    explanation: "Explanation:\nThe Spring Reference says:\n     \"The DataSourceTransactionManager\
      \ class is a PlatformTransactionManager implementation for single JDBC datasources.\
      \ It binds a JDBC connection from the specified data source to the currently executing\
      \ thread, potentially allowing for one thread connection per data source.\"\n\
      There is no JDBCTransactionManager, JDBCDataSourceTransactionManager, or JDBCPlatformTransactionManager\
      \ for this purpose.\nReference\n13.3.8. DataSourceTransactionManager\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/jdbc.html#jdbc-DataSourceTransactionManager\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these is true regarding Spring AOP proxies?"
    correct:
      - "A and B."
    other:
      - "Spring AOP cannot use CGLIB proxies if the target method is final  (marked\
        \ with 'final' modifier of java)."
      - "Spring AOP cannot use JDK dynamic proxies if the target object does not\
        \ implement an interface."
      - "Spring AOP cannot use CGLIB proxies if the target object implements an\
        \ interface."
    explanation: "Explanation:\nSpring AOP can use CGLIB proxies whether the target\
      \ object implements an interface or not.\nSpring AOP cannot use CGLIB proxies\
      \ if the target method is final  (marked with 'final' modifier of java), as those\
      \ methods cannot be overridden.\nReference\n8.1.3. AOP Proxies\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-introduction-proxies\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE\n8.6. Proxying mechanisms\n\
      \  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-proxying\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these maps incoming web requests to appropriate handlers?"
    correct:
      - "HandlerMapping"
    other:
      - "ViewResolver"
      - "RequestHandler"
      - "FlashMapManager"
    explanation: "Explanation:\nThere is no RequestHandler for this purpose.\nReference\n\
      16.2.1. Special Bean Types In the WebApplicationContext\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/mvc.html#mvc-servlet-special-bean-types\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these advice types can be defined using annotations?  Select\
      \ all that apply."
    correct:
      - "After returning (with no exception) advice"
      - "Around advice"
      - "After throwing advice"
      - "Before advice"
    other: [ ]
    explanation: "Explanation:\nAround advice:  @Around\nAfter throwing advice:  @AfterThrowing\n\
      After returning advice:  @AfterReturning\nBefore advice:  @Before\nAfter (finally)\
      \ advice:   @After\nReference\n8.2.4. Declaring advice\n  *  http://docs.spring.io/spring-framework/docs/4.0.9.RELEASE/spring-framework-reference/html/aop.html#aop-advice\n\
      \  *  Spring Framework Reference Documentation 4.0.9.RELEASE"
  - question: "Which of these database system isolation levels is best described below?\n\
      This is the lowest isolation level. Dirty reads are allowed.  \nTransactions that\
      \ are not yet committed can appear in your queries."
    correct:
      - "Read uncommitted"
    other:
      - "Read committed"
      - "Serializable"
      - "Repeatable reads"
    explanation: "Explanation:\nReference\nEnum Isolation\n  *  http://docs.spring.io/autorepo/docs/spring/4.0.9.RELEASE/javadoc-api/org/springframework/transaction/annotation/Isolation.html\n\
      \  *  Spring Framework 4.0.9.RELEASE API\nIsolation (database systems)\n  *  http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels\n\
      \  *  Wikipedia"
  - question: "What is a Aspect?"
    correct:
      - "A module that encapsulate pointcuts and advice"
    other:
      - "Code to be executed at each selected join poin"
      - "An expression that selects on or more join point"
      - "Technique by which aspect are combined with main code."
    explanation: "Explanation:\nReference\nJoin point: a point in the execution of a\
      \ program such as a method call or exception thrown\nPointcut: An expression that\
      \ selects one or more join points\nAdvice: code to be executed at each selected\
      \ join point\nAspect: A module that encapsulates pointcuts and advice\nWeaving:\
      \ Technique by which aspects are combined with main code."
  - question: "A bean annotated with 'Session' scope is created:"
    correct:
      - "Once per user session"
    other:
      - "Once per request"
      - "Each time the bean is referenced"
      - "All are true"
    explanation: "Explanation:\nReference\nSingleton: A single instance is used\nprototype:\
      \ A new instance is created each time the bean is referenced\nsession: A new instance\
      \ is created once per user session - web environment only\nrequest: A new instance\
      \ is created once per request - web environment only"
  - question: "Which bean get injected here?\n\n@Component \npublic class TransferServiceImpl\
      \ implements TransferService {\n\n@Autowired \npublic TransferServiceImpl(AccountRepository\
      \ accountRepository) {...}\n\n\n@Component\npublic class JpaAccountRepository\
      \ implements AccountRepository{...}\n\n@Component\npublic class JdbcAccountRepository\
      \ implements AccountRepository{...}\n  \n}"
    correct:
      - "exception will be thrown"
    other:
      - "jpaAccountRepository"
      - "Once per request"
      - "jdbcAccountRepository"
    explanation: "Explanation:\nReference\nNoSuchBeanDefinitionException will be thrown,\
      \ no unique bean of type AccountRepository is defined: Expected single bean but\
      \ found 2 .."
  - question: "What is the best practices?"
    correct:
      - "@ComponentScan ({\"com.bank.app.repositorty\", \"com.bank.app.service\"\
        , \"com.bank.app.controller\"})"
    other:
      - "@ComponentScan(\"com\")"
      - "@componentScan({\"org\",\"com\"})"
      - "@ComponentScan ({com.bank.app})"
    explanation: "Explanation:\nReference\nreally bad\n@componentScan({\"org\",\"com\"\
      })\nstill bad\n@ComponentScan ({com.bank.app})\nOk\n@ComponentScan(\"com\")\n\
      Optimized\n@ComponentScan ({\"com.bank.app.repositorty\", \"com.bank.app.service\"\
      , \"com.bank.app.controller\"})"
  - question: "During which phase can BeanPostProcessor modify the bean initialization?"
    correct:
      - "BeforeInit & AfterInit"
    other:
      - "AfterInit"
      - "PostConstruct"
      - "BeforeInit"
    explanation: "Explanation:\nReference\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html"
  - question: "Which of the statements is true?"
    correct:
      - "- All"
    other:
      - "- Spring beans are instantiated, assembled, and otherwise managed by a\
        \ Spring IoC container."
      - "- Spring beans are managed by the Spring IoC container."
      - "- Spring beans are simple POJOs."
    explanation: "Explanation:\nReference"
  - question: "Can you load the separate ApplicationContext for junit test? select one"
    correct:
      - "Yes @ContextConfiguration(className.class)"
    other:
      - "Yes @ApplicationContext(ClassName.class)"
      - "No, It is not possible"
      - "Both @ApplicationContext(ClassName.class) and @ContextConfiguration(className.class)"
    explanation: "Explanation:\nReference: https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html"
  - question: "Which of the options are Incorrect? \n\n@GetMapping(\"/orders/{id}\")"
    correct:
      - "public Order getOrder(@PathVariable(\"orderId\")long orderId{...}"
      - "public Order getOrder(@PathVariable(\"orderId\")long id){....}"
    other:
      - "public Order getOrder(@PathVariable(\"id\")long orderId){....}"
      - "public Order getOrder(@PathVariable long id){....}"

    explanation: "Explanation:\nReference:"
  - question: "How can you disable some Autoconfiguration classes, if they don't suit\
     \ your needs?"
    correct:
      - "@EnableAutoConfiguration(exclude= DataSourceAutoConfiguration.class)"
    other:
      - "@EnableAutoConfiguration(provided= DataSourceAutoConfiguration.class)"
      - "@EnableAutoConfiguration(exclude= DataSourceAutoConfiguration.class) or @EnableAutoConfiguration(provided= DataSourceAutoConfiguration.class)"
      - "@ExcludeAutoConfiguration(exclude= DataSourceAutoConfiguration.class)"
    explanation: "Explanation: \nReference: \n*16.2\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-auto-configuration.html"
  - question: "@SpringBootApplication is equivalent to which annotation? select one"
    correct:
      - "@Configuration, @ComponentScan, @EnableAutoConfiguration"
    other:
      - "@SpringBootConfiguration, @ComponentScan, @EnableAutoConfiguration"
      - "@EnableJpaReposorities, @ComponentScan, @EnableAutoConfiguration, @Configuration"
    explanation: "Explanation:\nReference:\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-using-springbootapplication-annotation.html"
